var read_, readAsync, readBinary, Module = void 0 !== Module ? Module : {}, moduleOverrides = Object.assign({}, Module), arguments_ = [], thisProgram = "./this.program", quit_ = (e,t)=>{
    throw t
}
, ENVIRONMENT_IS_WEB = "object" == typeof window, ENVIRONMENT_IS_WORKER = "function" == typeof importScripts, scriptDirectory = ("object" == typeof process && "object" == typeof process.versions && process.versions.node,
"");
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    ENVIRONMENT_IS_WORKER ? scriptDirectory = self.location.href : void 0 !== document && document.currentScript && (scriptDirectory = document.currentScript.src);
    scriptDirectory = 0 !== scriptDirectory.indexOf("blob:") ? scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "";
    read_ = e=>{
        var t = new XMLHttpRequest;
        t.open("GET", e, !1);
        t.send(null);
        return t.responseText
    }
    ;
    ENVIRONMENT_IS_WORKER && (readBinary = e=>{
        var t = new XMLHttpRequest;
        t.open("GET", e, !1);
        t.responseType = "arraybuffer";
        t.send(null);
        return new Uint8Array(t.response)
    }
    );
    readAsync = (e,t,r)=>{
        var n = new XMLHttpRequest;
        n.open("GET", e, !0);
        n.responseType = "arraybuffer";
        n.onload = ()=>{
            200 == n.status || 0 == n.status && n.response ? t(n.response) : r()
        }
        ;
        n.onerror = r;
        n.send(null)
    }
    ;
    e=>document.title = e
}
var wasmBinary, out = Module.print || console.log.bind(console), err = Module.printErr || console.error.bind(console);
Object.assign(Module, moduleOverrides);
moduleOverrides = null;
Module.arguments && (arguments_ = Module.arguments);
Module.thisProgram && (thisProgram = Module.thisProgram);
Module.quit && (quit_ = Module.quit);
Module.wasmBinary && (wasmBinary = Module.wasmBinary);
var wasmMemory, noExitRuntime = Module.noExitRuntime || !0;
"object" != typeof WebAssembly && abort("no native wasm support detected");
var EXITSTATUS, HEAP8, HEAPU8, HEAP32, HEAPU32, wasmTable, ABORT = !1;
function assert(e, t) {
    e || abort(t)
}
function updateMemoryViews() {
    var e = wasmMemory.buffer;
    Module.HEAP8 = HEAP8 = new Int8Array(e);
    Module.HEAP16 = new Int16Array(e);
    Module.HEAPU8 = HEAPU8 = new Uint8Array(e);
    Module.HEAPU16 = new Uint16Array(e);
    Module.HEAP32 = HEAP32 = new Int32Array(e);
    Module.HEAPU32 = HEAPU32 = new Uint32Array(e);
    Module.HEAPF32 = new Float32Array(e);
    Module.HEAPF64 = new Float64Array(e)
}
var __ATPRERUN__ = []
  , __ATINIT__ = []
  , __ATMAIN__ = []
  , __ATPOSTRUN__ = []
  , runtimeKeepaliveCounter = 0;
function keepRuntimeAlive() {
    return noExitRuntime || runtimeKeepaliveCounter > 0
}
var runDependencies = 0
  , runDependencyWatcher = null
  , dependenciesFulfilled = null;
function getUniqueRunDependency(e) {
    return e
}
function addRunDependency(e) {
    runDependencies++;
    Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies)
}
function removeRunDependency(e) {
    runDependencies--;
    Module.monitorRunDependencies && Module.monitorRunDependencies(runDependencies);
    if (0 == runDependencies) {
        if (null !== runDependencyWatcher) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null
        }
        if (dependenciesFulfilled) {
            var t = dependenciesFulfilled;
            dependenciesFulfilled = null;
            t()
        }
    }
}
function abort(e) {
    Module.onAbort && Module.onAbort(e);
    err(e = "Aborted(" + e + ")");
    ABORT = !0;
    EXITSTATUS = 1;
    e += ". Build with -sASSERTIONS for more info.";
    throw new WebAssembly.RuntimeError(e)
}
var wasmBinaryFile, path, tempDouble, tempI64, dataURIPrefix = "data:application/octet-stream;base64,";
function isDataURI(e) {
    return e.startsWith(dataURIPrefix)
}
isDataURI(wasmBinaryFile = "app.wasm") || (wasmBinaryFile = (path = wasmBinaryFile,
Module.locateFile ? Module.locateFile(path, scriptDirectory) : scriptDirectory + path));
function getBinarySync(e) {
    if (e == wasmBinaryFile && wasmBinary)
        return new Uint8Array(wasmBinary);
    if (readBinary)
        return readBinary(e);
    throw "both async and sync fetching of the wasm failed"
}
function instantiateArrayBuffer(e, t, r) {
    return function(e) {
        return wasmBinary || !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER || "function" != typeof fetch ? Promise.resolve().then(()=>getBinarySync(e)) : fetch(e, {
            credentials: "same-origin"
        }).then(t=>{
            if (!t.ok)
                throw "failed to load wasm binary file at '" + e + "'";
            return t.arrayBuffer()
        }
        ).catch(()=>getBinarySync(e))
    }(e).then(e=>WebAssembly.instantiate(e, t)).then(e=>e).then(r, e=>{
        err(`failed to asynchronously prepare wasm: ${e}`);
        abort(e)
    }
    )
}
var _emscripten_get_now, _emscripten_set_main_loop_timing = (e,t)=>{
    Browser.mainLoop.timingMode = e;
    Browser.mainLoop.timingValue = t;
    if (!Browser.mainLoop.func)
        return 1;
    Browser.mainLoop.running || (Browser.mainLoop.running = !0);
    if (0 == e) {
        Browser.mainLoop.scheduler = function() {
            var e = 0 | Math.max(0, Browser.mainLoop.tickStartTime + t - _emscripten_get_now());
            setTimeout(Browser.mainLoop.runner, e)
        }
        ;
        Browser.mainLoop.method = "timeout"
    } else if (1 == e) {
        Browser.mainLoop.scheduler = function() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner)
        }
        ;
        Browser.mainLoop.method = "rAF"
    } else if (2 == e) {
        if ("undefined" == typeof setImmediate) {
            var r = [];
            addEventListener("message", e=>{
                if ("setimmediate" === e.data || "setimmediate" === e.data.target) {
                    e.stopPropagation();
                    r.shift()()
                }
            }
            , !0);
            setImmediate = function(e) {
                r.push(e);
                if (ENVIRONMENT_IS_WORKER) {
                    void 0 === Module.setImmediates && (Module.setImmediates = []);
                    Module.setImmediates.push(e);
                    postMessage({
                        target: "setimmediate"
                    })
                } else
                    postMessage("setimmediate", "*")
            }
        }
        Browser.mainLoop.scheduler = function() {
            setImmediate(Browser.mainLoop.runner)
        }
        ;
        Browser.mainLoop.method = "immediate"
    }
    return 0
}
;
_emscripten_get_now = ()=>performance.now();
var handleException = e=>{
    if (e instanceof ExitStatus || "unwind" == e)
        return EXITSTATUS;
    quit_(1, e)
}
;
function ExitStatus(e) {
    this.name = "ExitStatus";
    this.message = `Program terminated with exit(${e})`;
    this.status = e
}
var PATH = {
    isAbs: e=>"/" === e.charAt(0),
    splitPath: e=>{
        return /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1)
    }
    ,
    normalizeArray: (e,t)=>{
        for (var r = 0, n = e.length - 1; n >= 0; n--) {
            var o = e[n];
            if ("." === o)
                e.splice(n, 1);
            else if (".." === o) {
                e.splice(n, 1);
                r++
            } else if (r) {
                e.splice(n, 1);
                r--
            }
        }
        if (t)
            for (; r; r--)
                e.unshift("..");
        return e
    }
    ,
    normalize: e=>{
        var t = PATH.isAbs(e)
          , r = "/" === e.substr(-1);
        (e = PATH.normalizeArray(e.split("/").filter(e=>!!e), !t).join("/")) || t || (e = ".");
        e && r && (e += "/");
        return (t ? "/" : "") + e
    }
    ,
    dirname: e=>{
        var t = PATH.splitPath(e)
          , r = t[0]
          , n = t[1];
        if (!r && !n)
            return ".";
        n && (n = n.substr(0, n.length - 1));
        return r + n
    }
    ,
    basename: e=>{
        if ("/" === e)
            return "/";
        var t = (e = (e = PATH.normalize(e)).replace(/\/$/, "")).lastIndexOf("/");
        return -1 === t ? e : e.substr(t + 1)
    }
    ,
    join: function() {
        var e = Array.prototype.slice.call(arguments);
        return PATH.normalize(e.join("/"))
    },
    join2: (e,t)=>PATH.normalize(e + "/" + t)
}
  , randomFill = e=>(randomFill = (()=>{
    if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues)
        return e=>crypto.getRandomValues(e);
    abort("initRandomDevice")
}
)())(e)
  , PATH_FS = {
    resolve: function() {
        for (var e = "", t = !1, r = arguments.length - 1; r >= -1 && !t; r--) {
            var n = r >= 0 ? arguments[r] : FS.cwd();
            if ("string" != typeof n)
                throw new TypeError("Arguments to path.resolve must be strings");
            if (!n)
                return "";
            e = n + "/" + e;
            t = PATH.isAbs(n)
        }
        return (t ? "/" : "") + (e = PATH.normalizeArray(e.split("/").filter(e=>!!e), !t).join("/")) || "."
    },
    relative: (e,t)=>{
        e = PATH_FS.resolve(e).substr(1);
        t = PATH_FS.resolve(t).substr(1);
        function r(e) {
            for (var t = 0; t < e.length && "" === e[t]; t++)
                ;
            for (var r = e.length - 1; r >= 0 && "" === e[r]; r--)
                ;
            return t > r ? [] : e.slice(t, r - t + 1)
        }
        for (var n = r(e.split("/")), o = r(t.split("/")), i = Math.min(n.length, o.length), a = i, s = 0; s < i; s++)
            if (n[s] !== o[s]) {
                a = s;
                break
            }
        var u = [];
        for (s = a; s < n.length; s++)
            u.push("..");
        return (u = u.concat(o.slice(a))).join("/")
    }
}
  , UTF8Decoder = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0
  , UTF8ArrayToString = (e,t,r)=>{
    for (var n = t + r, o = t; e[o] && !(o >= n); )
        ++o;
    if (o - t > 16 && e.buffer && UTF8Decoder)
        return UTF8Decoder.decode(e.subarray(t, o));
    for (var i = ""; t < o; ) {
        var a = e[t++];
        if (128 & a) {
            var s = 63 & e[t++];
            if (192 != (224 & a)) {
                var u = 63 & e[t++];
                if ((a = 224 == (240 & a) ? (15 & a) << 12 | s << 6 | u : (7 & a) << 18 | s << 12 | u << 6 | 63 & e[t++]) < 65536)
                    i += String.fromCharCode(a);
                else {
                    var l = a - 65536;
                    i += String.fromCharCode(55296 | l >> 10, 56320 | 1023 & l)
                }
            } else
                i += String.fromCharCode((31 & a) << 6 | s)
        } else
            i += String.fromCharCode(a)
    }
    return i
}
  , FS_stdin_getChar_buffer = []
  , lengthBytesUTF8 = e=>{
    for (var t = 0, r = 0; r < e.length; ++r) {
        var n = e.charCodeAt(r);
        if (n <= 127)
            t++;
        else if (n <= 2047)
            t += 2;
        else if (n >= 55296 && n <= 57343) {
            t += 4;
            ++r
        } else
            t += 3
    }
    return t
}
  , stringToUTF8Array = (e,t,r,n)=>{
    if (!(n > 0))
        return 0;
    for (var o = r, i = r + n - 1, a = 0; a < e.length; ++a) {
        var s = e.charCodeAt(a);
        if (s >= 55296 && s <= 57343) {
            s = 65536 + ((1023 & s) << 10) | 1023 & e.charCodeAt(++a)
        }
        if (s <= 127) {
            if (r >= i)
                break;
            t[r++] = s
        } else if (s <= 2047) {
            if (r + 1 >= i)
                break;
            t[r++] = 192 | s >> 6;
            t[r++] = 128 | 63 & s
        } else if (s <= 65535) {
            if (r + 2 >= i)
                break;
            t[r++] = 224 | s >> 12;
            t[r++] = 128 | s >> 6 & 63;
            t[r++] = 128 | 63 & s
        } else {
            if (r + 3 >= i)
                break;
            t[r++] = 240 | s >> 18;
            t[r++] = 128 | s >> 12 & 63;
            t[r++] = 128 | s >> 6 & 63;
            t[r++] = 128 | 63 & s
        }
    }
    t[r] = 0;
    return r - o
}
;
function intArrayFromString(e, t, r) {
    var n = r > 0 ? r : lengthBytesUTF8(e) + 1
      , o = new Array(n)
      , i = stringToUTF8Array(e, o, 0, o.length);
    t && (o.length = i);
    return o
}
var TTY = {
    ttys: [],
    init() {},
    shutdown() {},
    register(e, t) {
        TTY.ttys[e] = {
            input: [],
            output: [],
            ops: t
        };
        FS.registerDevice(e, TTY.stream_ops)
    },
    stream_ops: {
        open(e) {
            var t = TTY.ttys[e.node.rdev];
            if (!t)
                throw new FS.ErrnoError(43);
            e.tty = t;
            e.seekable = !1
        },
        close(e) {
            e.tty.ops.fsync(e.tty)
        },
        fsync(e) {
            e.tty.ops.fsync(e.tty)
        },
        read(e, t, r, n, o) {
            if (!e.tty || !e.tty.ops.get_char)
                throw new FS.ErrnoError(60);
            for (var i = 0, a = 0; a < n; a++) {
                var s;
                try {
                    s = e.tty.ops.get_char(e.tty)
                } catch (e) {
                    throw new FS.ErrnoError(29)
                }
                if (void 0 === s && 0 === i)
                    throw new FS.ErrnoError(6);
                if (null == s)
                    break;
                i++;
                t[r + a] = s
            }
            i && (e.node.timestamp = Date.now());
            return i
        },
        write(e, t, r, n, o) {
            if (!e.tty || !e.tty.ops.put_char)
                throw new FS.ErrnoError(60);
            try {
                for (var i = 0; i < n; i++)
                    e.tty.ops.put_char(e.tty, t[r + i])
            } catch (e) {
                throw new FS.ErrnoError(29)
            }
            n && (e.node.timestamp = Date.now());
            return i
        }
    },
    default_tty_ops: {
        get_char: e=>(()=>{
            if (!FS_stdin_getChar_buffer.length) {
                var e = null;
                void 0 !== window && "function" == typeof window.prompt ? null !== (e = window.prompt("Input: ")) && (e += "\n") : "function" == typeof readline && null !== (e = readline()) && (e += "\n");
                if (!e)
                    return null;
                FS_stdin_getChar_buffer = intArrayFromString(e, !0)
            }
            return FS_stdin_getChar_buffer.shift()
        }
        )(),
        put_char(e, t) {
            if (null === t || 10 === t) {
                out(UTF8ArrayToString(e.output, 0));
                e.output = []
            } else
                0 != t && e.output.push(t)
        },
        fsync(e) {
            if (e.output && e.output.length > 0) {
                out(UTF8ArrayToString(e.output, 0));
                e.output = []
            }
        },
        ioctl_tcgets: e=>({
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }),
        ioctl_tcsets: (e,t,r)=>0,
        ioctl_tiocgwinsz: e=>[24, 80]
    },
    default_tty1_ops: {
        put_char(e, t) {
            if (null === t || 10 === t) {
                err(UTF8ArrayToString(e.output, 0));
                e.output = []
            } else
                0 != t && e.output.push(t)
        },
        fsync(e) {
            if (e.output && e.output.length > 0) {
                err(UTF8ArrayToString(e.output, 0));
                e.output = []
            }
        }
    }
}
  , mmapAlloc = e=>{
    e = ((e,t)=>Math.ceil(e / t) * t)(e, 65536);
    var t = _emscripten_builtin_memalign(65536, e);
    return t ? ((e,t)=>{
        HEAPU8.fill(0, e, e + t);
        return e
    }
    )(t, e) : 0
}
  , MEMFS = {
    ops_table: null,
    mount: e=>MEMFS.createNode(null, "/", 16895, 0),
    createNode(e, t, r, n) {
        if (FS.isBlkdev(r) || FS.isFIFO(r))
            throw new FS.ErrnoError(63);
        MEMFS.ops_table || (MEMFS.ops_table = {
            dir: {
                node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr,
                    lookup: MEMFS.node_ops.lookup,
                    mknod: MEMFS.node_ops.mknod,
                    rename: MEMFS.node_ops.rename,
                    unlink: MEMFS.node_ops.unlink,
                    rmdir: MEMFS.node_ops.rmdir,
                    readdir: MEMFS.node_ops.readdir,
                    symlink: MEMFS.node_ops.symlink
                },
                stream: {
                    llseek: MEMFS.stream_ops.llseek
                }
            },
            file: {
                node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr
                },
                stream: {
                    llseek: MEMFS.stream_ops.llseek,
                    read: MEMFS.stream_ops.read,
                    write: MEMFS.stream_ops.write,
                    allocate: MEMFS.stream_ops.allocate,
                    mmap: MEMFS.stream_ops.mmap,
                    msync: MEMFS.stream_ops.msync
                }
            },
            link: {
                node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr,
                    readlink: MEMFS.node_ops.readlink
                },
                stream: {}
            },
            chrdev: {
                node: {
                    getattr: MEMFS.node_ops.getattr,
                    setattr: MEMFS.node_ops.setattr
                },
                stream: FS.chrdev_stream_ops
            }
        });
        var o = FS.createNode(e, t, r, n);
        if (FS.isDir(o.mode)) {
            o.node_ops = MEMFS.ops_table.dir.node;
            o.stream_ops = MEMFS.ops_table.dir.stream;
            o.contents = {}
        } else if (FS.isFile(o.mode)) {
            o.node_ops = MEMFS.ops_table.file.node;
            o.stream_ops = MEMFS.ops_table.file.stream;
            o.usedBytes = 0;
            o.contents = null
        } else if (FS.isLink(o.mode)) {
            o.node_ops = MEMFS.ops_table.link.node;
            o.stream_ops = MEMFS.ops_table.link.stream
        } else if (FS.isChrdev(o.mode)) {
            o.node_ops = MEMFS.ops_table.chrdev.node;
            o.stream_ops = MEMFS.ops_table.chrdev.stream
        }
        o.timestamp = Date.now();
        if (e) {
            e.contents[t] = o;
            e.timestamp = o.timestamp
        }
        return o
    },
    getFileDataAsTypedArray: e=>e.contents ? e.contents.subarray ? e.contents.subarray(0, e.usedBytes) : new Uint8Array(e.contents) : new Uint8Array(0),
    expandFileStorage(e, t) {
        var r = e.contents ? e.contents.length : 0;
        if (!(r >= t)) {
            t = Math.max(t, r * (r < 1048576 ? 2 : 1.125) >>> 0);
            0 != r && (t = Math.max(t, 256));
            var n = e.contents;
            e.contents = new Uint8Array(t);
            e.usedBytes > 0 && e.contents.set(n.subarray(0, e.usedBytes), 0)
        }
    },
    resizeFileStorage(e, t) {
        if (e.usedBytes != t)
            if (0 == t) {
                e.contents = null;
                e.usedBytes = 0
            } else {
                var r = e.contents;
                e.contents = new Uint8Array(t);
                r && e.contents.set(r.subarray(0, Math.min(t, e.usedBytes)));
                e.usedBytes = t
            }
    },
    node_ops: {
        getattr(e) {
            var t = {};
            t.dev = FS.isChrdev(e.mode) ? e.id : 1;
            t.ino = e.id;
            t.mode = e.mode;
            t.nlink = 1;
            t.uid = 0;
            t.gid = 0;
            t.rdev = e.rdev;
            FS.isDir(e.mode) ? t.size = 4096 : FS.isFile(e.mode) ? t.size = e.usedBytes : FS.isLink(e.mode) ? t.size = e.link.length : t.size = 0;
            t.atime = new Date(e.timestamp);
            t.mtime = new Date(e.timestamp);
            t.ctime = new Date(e.timestamp);
            t.blksize = 4096;
            t.blocks = Math.ceil(t.size / t.blksize);
            return t
        },
        setattr(e, t) {
            void 0 !== t.mode && (e.mode = t.mode);
            void 0 !== t.timestamp && (e.timestamp = t.timestamp);
            void 0 !== t.size && MEMFS.resizeFileStorage(e, t.size)
        },
        lookup(e, t) {
            throw FS.genericErrors[44]
        },
        mknod: (e,t,r,n)=>MEMFS.createNode(e, t, r, n),
        rename(e, t, r) {
            if (FS.isDir(e.mode)) {
                var n;
                try {
                    n = FS.lookupNode(t, r)
                } catch (e) {}
                if (n)
                    for (var o in n.contents)
                        throw new FS.ErrnoError(55)
            }
            delete e.parent.contents[e.name];
            e.parent.timestamp = Date.now();
            e.name = r;
            t.contents[r] = e;
            t.timestamp = e.parent.timestamp;
            e.parent = t
        },
        unlink(e, t) {
            delete e.contents[t];
            e.timestamp = Date.now()
        },
        rmdir(e, t) {
            var r = FS.lookupNode(e, t);
            for (var n in r.contents)
                throw new FS.ErrnoError(55);
            delete e.contents[t];
            e.timestamp = Date.now()
        },
        readdir(e) {
            var t = [".", ".."];
            for (var r in e.contents)
                e.contents.hasOwnProperty(r) && t.push(r);
            return t
        },
        symlink(e, t, r) {
            var n = MEMFS.createNode(e, t, 41471, 0);
            n.link = r;
            return n
        },
        readlink(e) {
            if (!FS.isLink(e.mode))
                throw new FS.ErrnoError(28);
            return e.link
        }
    },
    stream_ops: {
        read(e, t, r, n, o) {
            var i = e.node.contents;
            if (o >= e.node.usedBytes)
                return 0;
            var a = Math.min(e.node.usedBytes - o, n);
            if (a > 8 && i.subarray)
                t.set(i.subarray(o, o + a), r);
            else
                for (var s = 0; s < a; s++)
                    t[r + s] = i[o + s];
            return a
        },
        write(e, t, r, n, o, i) {
            t.buffer === HEAP8.buffer && (i = !1);
            if (!n)
                return 0;
            var a = e.node;
            a.timestamp = Date.now();
            if (t.subarray && (!a.contents || a.contents.subarray)) {
                if (i) {
                    a.contents = t.subarray(r, r + n);
                    a.usedBytes = n;
                    return n
                }
                if (0 === a.usedBytes && 0 === o) {
                    a.contents = t.slice(r, r + n);
                    a.usedBytes = n;
                    return n
                }
                if (o + n <= a.usedBytes) {
                    a.contents.set(t.subarray(r, r + n), o);
                    return n
                }
            }
            MEMFS.expandFileStorage(a, o + n);
            if (a.contents.subarray && t.subarray)
                a.contents.set(t.subarray(r, r + n), o);
            else
                for (var s = 0; s < n; s++)
                    a.contents[o + s] = t[r + s];
            a.usedBytes = Math.max(a.usedBytes, o + n);
            return n
        },
        llseek(e, t, r) {
            var n = t;
            1 === r ? n += e.position : 2 === r && FS.isFile(e.node.mode) && (n += e.node.usedBytes);
            if (n < 0)
                throw new FS.ErrnoError(28);
            return n
        },
        allocate(e, t, r) {
            MEMFS.expandFileStorage(e.node, t + r);
            e.node.usedBytes = Math.max(e.node.usedBytes, t + r)
        },
        mmap(e, t, r, n, o) {
            if (!FS.isFile(e.node.mode))
                throw new FS.ErrnoError(43);
            var i, a, s = e.node.contents;
            if (2 & o || s.buffer !== HEAP8.buffer) {
                (r > 0 || r + t < s.length) && (s = s.subarray ? s.subarray(r, r + t) : Array.prototype.slice.call(s, r, r + t));
                a = !0;
                if (!(i = mmapAlloc(t)))
                    throw new FS.ErrnoError(48);
                HEAP8.set(s, i)
            } else {
                a = !1;
                i = s.byteOffset
            }
            return {
                ptr: i,
                allocated: a
            }
        },
        msync(e, t, r, n, o) {
            MEMFS.stream_ops.write(e, t, 0, n, r, !1);
            return 0
        }
    }
}
  , preloadPlugins = Module.preloadPlugins || []
  , FS_handledByPreloadPlugin = (e,t,r,n)=>{
    void 0 !== Browser && Browser.init();
    var o = !1;
    preloadPlugins.forEach(i=>{
        if (!o && i.canHandle(t)) {
            i.handle(e, t, r, n);
            o = !0
        }
    }
    );
    return o
}
  , FS_getMode = (e,t)=>{
    var r = 0;
    e && (r |= 365);
    t && (r |= 146);
    return r
}
  , FS = {
    root: null,
    mounts: [],
    devices: {},
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: !1,
    ignorePermissions: !0,
    ErrnoError: null,
    genericErrors: {},
    filesystems: null,
    syncFSRequests: 0,
    lookupPath(e, t={}) {
        if (!(e = PATH_FS.resolve(e)))
            return {
                path: "",
                node: null
            };
        if ((t = Object.assign({
            follow_mount: !0,
            recurse_count: 0
        }, t)).recurse_count > 8)
            throw new FS.ErrnoError(32);
        for (var r = e.split("/").filter(e=>!!e), n = FS.root, o = "/", i = 0; i < r.length; i++) {
            var a = i === r.length - 1;
            if (a && t.parent)
                break;
            n = FS.lookupNode(n, r[i]);
            o = PATH.join2(o, r[i]);
            FS.isMountpoint(n) && (!a || a && t.follow_mount) && (n = n.mounted.root);
            if (!a || t.follow)
                for (var s = 0; FS.isLink(n.mode); ) {
                    var u = FS.readlink(o);
                    o = PATH_FS.resolve(PATH.dirname(o), u);
                    n = FS.lookupPath(o, {
                        recurse_count: t.recurse_count + 1
                    }).node;
                    if (s++ > 40)
                        throw new FS.ErrnoError(32)
                }
        }
        return {
            path: o,
            node: n
        }
    },
    getPath(e) {
        for (var t; ; ) {
            if (FS.isRoot(e)) {
                var r = e.mount.mountpoint;
                return t ? "/" !== r[r.length - 1] ? `${r}/${t}` : r + t : r
            }
            t = t ? `${e.name}/${t}` : e.name;
            e = e.parent
        }
    },
    hashName(e, t) {
        for (var r = 0, n = 0; n < t.length; n++)
            r = (r << 5) - r + t.charCodeAt(n) | 0;
        return (e + r >>> 0) % FS.nameTable.length
    },
    hashAddNode(e) {
        var t = FS.hashName(e.parent.id, e.name);
        e.name_next = FS.nameTable[t];
        FS.nameTable[t] = e
    },
    hashRemoveNode(e) {
        var t = FS.hashName(e.parent.id, e.name);
        if (FS.nameTable[t] === e)
            FS.nameTable[t] = e.name_next;
        else
            for (var r = FS.nameTable[t]; r; ) {
                if (r.name_next === e) {
                    r.name_next = e.name_next;
                    break
                }
                r = r.name_next
            }
    },
    lookupNode(e, t) {
        var r = FS.mayLookup(e);
        if (r)
            throw new FS.ErrnoError(r,e);
        for (var n = FS.hashName(e.id, t), o = FS.nameTable[n]; o; o = o.name_next) {
            var i = o.name;
            if (o.parent.id === e.id && i === t)
                return o
        }
        return FS.lookup(e, t)
    },
    createNode(e, t, r, n) {
        var o = new FS.FSNode(e,t,r,n);
        FS.hashAddNode(o);
        return o
    },
    destroyNode(e) {
        FS.hashRemoveNode(e)
    },
    isRoot: e=>e === e.parent,
    isMountpoint: e=>!!e.mounted,
    isFile: e=>32768 == (61440 & e),
    isDir: e=>16384 == (61440 & e),
    isLink: e=>40960 == (61440 & e),
    isChrdev: e=>8192 == (61440 & e),
    isBlkdev: e=>24576 == (61440 & e),
    isFIFO: e=>4096 == (61440 & e),
    isSocket: e=>49152 == (49152 & e),
    flagsToPermissionString(e) {
        var t = ["r", "w", "rw"][3 & e];
        512 & e && (t += "w");
        return t
    },
    nodePermissions: (e,t)=>FS.ignorePermissions ? 0 : (!t.includes("r") || 292 & e.mode) && (!t.includes("w") || 146 & e.mode) && (!t.includes("x") || 73 & e.mode) ? 0 : 2,
    mayLookup(e) {
        var t = FS.nodePermissions(e, "x");
        return t || (e.node_ops.lookup ? 0 : 2)
    },
    mayCreate(e, t) {
        try {
            FS.lookupNode(e, t);
            return 20
        } catch (e) {}
        return FS.nodePermissions(e, "wx")
    },
    mayDelete(e, t, r) {
        var n;
        try {
            n = FS.lookupNode(e, t)
        } catch (e) {
            return e.errno
        }
        var o = FS.nodePermissions(e, "wx");
        if (o)
            return o;
        if (r) {
            if (!FS.isDir(n.mode))
                return 54;
            if (FS.isRoot(n) || FS.getPath(n) === FS.cwd())
                return 10
        } else if (FS.isDir(n.mode))
            return 31;
        return 0
    },
    mayOpen: (e,t)=>e ? FS.isLink(e.mode) ? 32 : FS.isDir(e.mode) && ("r" !== FS.flagsToPermissionString(t) || 512 & t) ? 31 : FS.nodePermissions(e, FS.flagsToPermissionString(t)) : 44,
    MAX_OPEN_FDS: 4096,
    nextfd() {
        for (var e = 0; e <= FS.MAX_OPEN_FDS; e++)
            if (!FS.streams[e])
                return e;
        throw new FS.ErrnoError(33)
    },
    getStreamChecked(e) {
        var t = FS.getStream(e);
        if (!t)
            throw new FS.ErrnoError(8);
        return t
    },
    getStream: e=>FS.streams[e],
    createStream(e, t=-1) {
        if (!FS.FSStream) {
            FS.FSStream = function() {
                this.shared = {}
            }
            ;
            FS.FSStream.prototype = {};
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get() {
                        return this.node
                    },
                    set(e) {
                        this.node = e
                    }
                },
                isRead: {
                    get() {
                        return 1 != (2097155 & this.flags)
                    }
                },
                isWrite: {
                    get() {
                        return 0 != (2097155 & this.flags)
                    }
                },
                isAppend: {
                    get() {
                        return 1024 & this.flags
                    }
                },
                flags: {
                    get() {
                        return this.shared.flags
                    },
                    set(e) {
                        this.shared.flags = e
                    }
                },
                position: {
                    get() {
                        return this.shared.position
                    },
                    set(e) {
                        this.shared.position = e
                    }
                }
            })
        }
        e = Object.assign(new FS.FSStream, e);
        -1 == t && (t = FS.nextfd());
        e.fd = t;
        FS.streams[t] = e;
        return e
    },
    closeStream(e) {
        FS.streams[e] = null
    },
    chrdev_stream_ops: {
        open(e) {
            var t = FS.getDevice(e.node.rdev);
            e.stream_ops = t.stream_ops;
            e.stream_ops.open && e.stream_ops.open(e)
        },
        llseek() {
            throw new FS.ErrnoError(70)
        }
    },
    major: e=>e >> 8,
    minor: e=>255 & e,
    makedev: (e,t)=>e << 8 | t,
    registerDevice(e, t) {
        FS.devices[e] = {
            stream_ops: t
        }
    },
    getDevice: e=>FS.devices[e],
    getMounts(e) {
        for (var t = [], r = [e]; r.length; ) {
            var n = r.pop();
            t.push(n);
            r.push.apply(r, n.mounts)
        }
        return t
    },
    syncfs(e, t) {
        if ("function" == typeof e) {
            t = e;
            e = !1
        }
        FS.syncFSRequests++;
        FS.syncFSRequests > 1 && err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        var r = FS.getMounts(FS.root.mount)
          , n = 0;
        function o(e) {
            FS.syncFSRequests--;
            return t(e)
        }
        function i(e) {
            if (e) {
                if (!i.errored) {
                    i.errored = !0;
                    return o(e)
                }
            } else
                ++n >= r.length && o(null)
        }
        r.forEach(t=>{
            if (!t.type.syncfs)
                return i(null);
            t.type.syncfs(t, e, i)
        }
        )
    },
    mount(e, t, r) {
        var n, o = "/" === r, i = !r;
        if (o && FS.root)
            throw new FS.ErrnoError(10);
        if (!o && !i) {
            var a = FS.lookupPath(r, {
                follow_mount: !1
            });
            r = a.path;
            n = a.node;
            if (FS.isMountpoint(n))
                throw new FS.ErrnoError(10);
            if (!FS.isDir(n.mode))
                throw new FS.ErrnoError(54)
        }
        var s = {
            type: e,
            opts: t,
            mountpoint: r,
            mounts: []
        }
          , u = e.mount(s);
        u.mount = s;
        s.root = u;
        if (o)
            FS.root = u;
        else if (n) {
            n.mounted = s;
            n.mount && n.mount.mounts.push(s)
        }
        return u
    },
    unmount(e) {
        var t = FS.lookupPath(e, {
            follow_mount: !1
        });
        if (!FS.isMountpoint(t.node))
            throw new FS.ErrnoError(28);
        var r = t.node
          , n = r.mounted
          , o = FS.getMounts(n);
        Object.keys(FS.nameTable).forEach(e=>{
            for (var t = FS.nameTable[e]; t; ) {
                var r = t.name_next;
                o.includes(t.mount) && FS.destroyNode(t);
                t = r
            }
        }
        );
        r.mounted = null;
        var i = r.mount.mounts.indexOf(n);
        r.mount.mounts.splice(i, 1)
    },
    lookup: (e,t)=>e.node_ops.lookup(e, t),
    mknod(e, t, r) {
        var n = FS.lookupPath(e, {
            parent: !0
        }).node
          , o = PATH.basename(e);
        if (!o || "." === o || ".." === o)
            throw new FS.ErrnoError(28);
        var i = FS.mayCreate(n, o);
        if (i)
            throw new FS.ErrnoError(i);
        if (!n.node_ops.mknod)
            throw new FS.ErrnoError(63);
        return n.node_ops.mknod(n, o, t, r)
    },
    create(e, t) {
        t = void 0 !== t ? t : 438;
        t &= 4095;
        t |= 32768;
        return FS.mknod(e, t, 0)
    },
    mkdir(e, t) {
        t = void 0 !== t ? t : 511;
        t &= 1023;
        t |= 16384;
        return FS.mknod(e, t, 0)
    },
    mkdirTree(e, t) {
        for (var r = e.split("/"), n = "", o = 0; o < r.length; ++o)
            if (r[o]) {
                n += "/" + r[o];
                try {
                    FS.mkdir(n, t)
                } catch (e) {
                    if (20 != e.errno)
                        throw e
                }
            }
    },
    mkdev(e, t, r) {
        if (void 0 === r) {
            r = t;
            t = 438
        }
        t |= 8192;
        return FS.mknod(e, t, r)
    },
    symlink(e, t) {
        if (!PATH_FS.resolve(e))
            throw new FS.ErrnoError(44);
        var r = FS.lookupPath(t, {
            parent: !0
        }).node;
        if (!r)
            throw new FS.ErrnoError(44);
        var n = PATH.basename(t)
          , o = FS.mayCreate(r, n);
        if (o)
            throw new FS.ErrnoError(o);
        if (!r.node_ops.symlink)
            throw new FS.ErrnoError(63);
        return r.node_ops.symlink(r, n, e)
    },
    rename(e, t) {
        var r, n, o = PATH.dirname(e), i = PATH.dirname(t), a = PATH.basename(e), s = PATH.basename(t);
        r = FS.lookupPath(e, {
            parent: !0
        }).node;
        n = FS.lookupPath(t, {
            parent: !0
        }).node;
        if (!r || !n)
            throw new FS.ErrnoError(44);
        if (r.mount !== n.mount)
            throw new FS.ErrnoError(75);
        var u, l = FS.lookupNode(r, a), c = PATH_FS.relative(e, i);
        if ("." !== c.charAt(0))
            throw new FS.ErrnoError(28);
        if ("." !== (c = PATH_FS.relative(t, o)).charAt(0))
            throw new FS.ErrnoError(55);
        try {
            u = FS.lookupNode(n, s)
        } catch (e) {}
        if (l !== u) {
            var d = FS.isDir(l.mode)
              , h = FS.mayDelete(r, a, d);
            if (h)
                throw new FS.ErrnoError(h);
            if (h = u ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s))
                throw new FS.ErrnoError(h);
            if (!r.node_ops.rename)
                throw new FS.ErrnoError(63);
            if (FS.isMountpoint(l) || u && FS.isMountpoint(u))
                throw new FS.ErrnoError(10);
            if (n !== r && (h = FS.nodePermissions(r, "w")))
                throw new FS.ErrnoError(h);
            FS.hashRemoveNode(l);
            try {
                r.node_ops.rename(l, n, s)
            } catch (e) {
                throw e
            } finally {
                FS.hashAddNode(l)
            }
        }
    },
    rmdir(e) {
        var t = FS.lookupPath(e, {
            parent: !0
        }).node
          , r = PATH.basename(e)
          , n = FS.lookupNode(t, r)
          , o = FS.mayDelete(t, r, !0);
        if (o)
            throw new FS.ErrnoError(o);
        if (!t.node_ops.rmdir)
            throw new FS.ErrnoError(63);
        if (FS.isMountpoint(n))
            throw new FS.ErrnoError(10);
        t.node_ops.rmdir(t, r);
        FS.destroyNode(n)
    },
    readdir(e) {
        var t = FS.lookupPath(e, {
            follow: !0
        }).node;
        if (!t.node_ops.readdir)
            throw new FS.ErrnoError(54);
        return t.node_ops.readdir(t)
    },
    unlink(e) {
        var t = FS.lookupPath(e, {
            parent: !0
        }).node;
        if (!t)
            throw new FS.ErrnoError(44);
        var r = PATH.basename(e)
          , n = FS.lookupNode(t, r)
          , o = FS.mayDelete(t, r, !1);
        if (o)
            throw new FS.ErrnoError(o);
        if (!t.node_ops.unlink)
            throw new FS.ErrnoError(63);
        if (FS.isMountpoint(n))
            throw new FS.ErrnoError(10);
        t.node_ops.unlink(t, r);
        FS.destroyNode(n)
    },
    readlink(e) {
        var t = FS.lookupPath(e).node;
        if (!t)
            throw new FS.ErrnoError(44);
        if (!t.node_ops.readlink)
            throw new FS.ErrnoError(28);
        return PATH_FS.resolve(FS.getPath(t.parent), t.node_ops.readlink(t))
    },
    stat(e, t) {
        var r = FS.lookupPath(e, {
            follow: !t
        }).node;
        if (!r)
            throw new FS.ErrnoError(44);
        if (!r.node_ops.getattr)
            throw new FS.ErrnoError(63);
        return r.node_ops.getattr(r)
    },
    lstat: e=>FS.stat(e, !0),
    chmod(e, t, r) {
        var n;
        if ("string" == typeof e) {
            n = FS.lookupPath(e, {
                follow: !r
            }).node
        } else
            n = e;
        if (!n.node_ops.setattr)
            throw new FS.ErrnoError(63);
        n.node_ops.setattr(n, {
            mode: 4095 & t | -4096 & n.mode,
            timestamp: Date.now()
        })
    },
    lchmod(e, t) {
        FS.chmod(e, t, !0)
    },
    fchmod(e, t) {
        var r = FS.getStreamChecked(e);
        FS.chmod(r.node, t)
    },
    chown(e, t, r, n) {
        var o;
        if ("string" == typeof e) {
            o = FS.lookupPath(e, {
                follow: !n
            }).node
        } else
            o = e;
        if (!o.node_ops.setattr)
            throw new FS.ErrnoError(63);
        o.node_ops.setattr(o, {
            timestamp: Date.now()
        })
    },
    lchown(e, t, r) {
        FS.chown(e, t, r, !0)
    },
    fchown(e, t, r) {
        var n = FS.getStreamChecked(e);
        FS.chown(n.node, t, r)
    },
    truncate(e, t) {
        if (t < 0)
            throw new FS.ErrnoError(28);
        var r;
        if ("string" == typeof e) {
            r = FS.lookupPath(e, {
                follow: !0
            }).node
        } else
            r = e;
        if (!r.node_ops.setattr)
            throw new FS.ErrnoError(63);
        if (FS.isDir(r.mode))
            throw new FS.ErrnoError(31);
        if (!FS.isFile(r.mode))
            throw new FS.ErrnoError(28);
        var n = FS.nodePermissions(r, "w");
        if (n)
            throw new FS.ErrnoError(n);
        r.node_ops.setattr(r, {
            size: t,
            timestamp: Date.now()
        })
    },
    ftruncate(e, t) {
        var r = FS.getStreamChecked(e);
        if (0 == (2097155 & r.flags))
            throw new FS.ErrnoError(28);
        FS.truncate(r.node, t)
    },
    utime(e, t, r) {
        var n = FS.lookupPath(e, {
            follow: !0
        }).node;
        n.node_ops.setattr(n, {
            timestamp: Math.max(t, r)
        })
    },
    open(e, t, r) {
        if ("" === e)
            throw new FS.ErrnoError(44);
        r = void 0 === r ? 438 : r;
        r = 64 & (t = "string" == typeof t ? (e=>{
            var t = {
                r: 0,
                "r+": 2,
                w: 577,
                "w+": 578,
                a: 1089,
                "a+": 1090
            }[e];
            if (void 0 === t)
                throw new Error(`Unknown file open mode: ${e}`);
            return t
        }
        )(t) : t) ? 4095 & r | 32768 : 0;
        var n;
        if ("object" == typeof e)
            n = e;
        else {
            e = PATH.normalize(e);
            try {
                n = FS.lookupPath(e, {
                    follow: !(131072 & t)
                }).node
            } catch (e) {}
        }
        var o = !1;
        if (64 & t)
            if (n) {
                if (128 & t)
                    throw new FS.ErrnoError(20)
            } else {
                n = FS.mknod(e, r, 0);
                o = !0
            }
        if (!n)
            throw new FS.ErrnoError(44);
        FS.isChrdev(n.mode) && (t &= -513);
        if (65536 & t && !FS.isDir(n.mode))
            throw new FS.ErrnoError(54);
        if (!o) {
            var i = FS.mayOpen(n, t);
            if (i)
                throw new FS.ErrnoError(i)
        }
        512 & t && !o && FS.truncate(n, 0);
        t &= -131713;
        var a = FS.createStream({
            node: n,
            path: FS.getPath(n),
            flags: t,
            seekable: !0,
            position: 0,
            stream_ops: n.stream_ops,
            ungotten: [],
            error: !1
        });
        a.stream_ops.open && a.stream_ops.open(a);
        if (Module.logReadFiles && !(1 & t)) {
            FS.readFiles || (FS.readFiles = {});
            e in FS.readFiles || (FS.readFiles[e] = 1)
        }
        return a
    },
    close(e) {
        if (FS.isClosed(e))
            throw new FS.ErrnoError(8);
        e.getdents && (e.getdents = null);
        try {
            e.stream_ops.close && e.stream_ops.close(e)
        } catch (e) {
            throw e
        } finally {
            FS.closeStream(e.fd)
        }
        e.fd = null
    },
    isClosed: e=>null === e.fd,
    llseek(e, t, r) {
        if (FS.isClosed(e))
            throw new FS.ErrnoError(8);
        if (!e.seekable || !e.stream_ops.llseek)
            throw new FS.ErrnoError(70);
        if (0 != r && 1 != r && 2 != r)
            throw new FS.ErrnoError(28);
        e.position = e.stream_ops.llseek(e, t, r);
        e.ungotten = [];
        return e.position
    },
    read(e, t, r, n, o) {
        if (n < 0 || o < 0)
            throw new FS.ErrnoError(28);
        if (FS.isClosed(e))
            throw new FS.ErrnoError(8);
        if (1 == (2097155 & e.flags))
            throw new FS.ErrnoError(8);
        if (FS.isDir(e.node.mode))
            throw new FS.ErrnoError(31);
        if (!e.stream_ops.read)
            throw new FS.ErrnoError(28);
        var i = void 0 !== o;
        if (i) {
            if (!e.seekable)
                throw new FS.ErrnoError(70)
        } else
            o = e.position;
        var a = e.stream_ops.read(e, t, r, n, o);
        i || (e.position += a);
        return a
    },
    write(e, t, r, n, o, i) {
        if (n < 0 || o < 0)
            throw new FS.ErrnoError(28);
        if (FS.isClosed(e))
            throw new FS.ErrnoError(8);
        if (0 == (2097155 & e.flags))
            throw new FS.ErrnoError(8);
        if (FS.isDir(e.node.mode))
            throw new FS.ErrnoError(31);
        if (!e.stream_ops.write)
            throw new FS.ErrnoError(28);
        e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
        var a = void 0 !== o;
        if (a) {
            if (!e.seekable)
                throw new FS.ErrnoError(70)
        } else
            o = e.position;
        var s = e.stream_ops.write(e, t, r, n, o, i);
        a || (e.position += s);
        return s
    },
    allocate(e, t, r) {
        if (FS.isClosed(e))
            throw new FS.ErrnoError(8);
        if (t < 0 || r <= 0)
            throw new FS.ErrnoError(28);
        if (0 == (2097155 & e.flags))
            throw new FS.ErrnoError(8);
        if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
            throw new FS.ErrnoError(43);
        if (!e.stream_ops.allocate)
            throw new FS.ErrnoError(138);
        e.stream_ops.allocate(e, t, r)
    },
    mmap(e, t, r, n, o) {
        if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
            throw new FS.ErrnoError(2);
        if (1 == (2097155 & e.flags))
            throw new FS.ErrnoError(2);
        if (!e.stream_ops.mmap)
            throw new FS.ErrnoError(43);
        return e.stream_ops.mmap(e, t, r, n, o)
    },
    msync: (e,t,r,n,o)=>e.stream_ops.msync ? e.stream_ops.msync(e, t, r, n, o) : 0,
    munmap: e=>0,
    ioctl(e, t, r) {
        if (!e.stream_ops.ioctl)
            throw new FS.ErrnoError(59);
        return e.stream_ops.ioctl(e, t, r)
    },
    readFile(e, t={}) {
        t.flags = t.flags || 0;
        t.encoding = t.encoding || "binary";
        if ("utf8" !== t.encoding && "binary" !== t.encoding)
            throw new Error(`Invalid encoding type "${t.encoding}"`);
        var r, n = FS.open(e, t.flags), o = FS.stat(e).size, i = new Uint8Array(o);
        FS.read(n, i, 0, o, 0);
        "utf8" === t.encoding ? r = UTF8ArrayToString(i, 0) : "binary" === t.encoding && (r = i);
        FS.close(n);
        return r
    },
    writeFile(e, t, r={}) {
        r.flags = r.flags || 577;
        var n = FS.open(e, r.flags, r.mode);
        if ("string" == typeof t) {
            var o = new Uint8Array(lengthBytesUTF8(t) + 1)
              , i = stringToUTF8Array(t, o, 0, o.length);
            FS.write(n, o, 0, i, void 0, r.canOwn)
        } else {
            if (!ArrayBuffer.isView(t))
                throw new Error("Unsupported data type");
            FS.write(n, t, 0, t.byteLength, void 0, r.canOwn)
        }
        FS.close(n)
    },
    cwd: ()=>FS.currentPath,
    chdir(e) {
        var t = FS.lookupPath(e, {
            follow: !0
        });
        if (null === t.node)
            throw new FS.ErrnoError(44);
        if (!FS.isDir(t.node.mode))
            throw new FS.ErrnoError(54);
        var r = FS.nodePermissions(t.node, "x");
        if (r)
            throw new FS.ErrnoError(r);
        FS.currentPath = t.path
    },
    createDefaultDirectories() {
        FS.mkdir("/tmp");
        FS.mkdir("/home");
        FS.mkdir("/home/web_user")
    },
    createDefaultDevices() {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
            read: ()=>0,
            write: (e,t,r,n,o)=>n
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        var e = new Uint8Array(1024)
          , t = 0
          , r = ()=>{
            0 === t && (t = randomFill(e).byteLength);
            return e[--t]
        }
        ;
        FS.createDevice("/dev", "random", r);
        FS.createDevice("/dev", "urandom", r);
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp")
    },
    createSpecialDirectories() {
        FS.mkdir("/proc");
        var e = FS.mkdir("/proc/self");
        FS.mkdir("/proc/self/fd");
        FS.mount({
            mount() {
                var t = FS.createNode(e, "fd", 16895, 73);
                t.node_ops = {
                    lookup(e, t) {
                        var r = +t
                          , n = FS.getStreamChecked(r)
                          , o = {
                            parent: null,
                            mount: {
                                mountpoint: "fake"
                            },
                            node_ops: {
                                readlink: ()=>n.path
                            }
                        };
                        o.parent = o;
                        return o
                    }
                };
                return t
            }
        }, {}, "/proc/self/fd")
    },
    createStandardStreams() {
        Module.stdin ? FS.createDevice("/dev", "stdin", Module.stdin) : FS.symlink("/dev/tty", "/dev/stdin");
        Module.stdout ? FS.createDevice("/dev", "stdout", null, Module.stdout) : FS.symlink("/dev/tty", "/dev/stdout");
        Module.stderr ? FS.createDevice("/dev", "stderr", null, Module.stderr) : FS.symlink("/dev/tty1", "/dev/stderr");
        FS.open("/dev/stdin", 0),
        FS.open("/dev/stdout", 1),
        FS.open("/dev/stderr", 1)
    },
    ensureErrnoError() {
        if (!FS.ErrnoError) {
            FS.ErrnoError = function(e, t) {
                this.name = "ErrnoError";
                this.node = t;
                this.setErrno = function(e) {
                    this.errno = e
                }
                ;
                this.setErrno(e);
                this.message = "FS error"
            }
            ;
            FS.ErrnoError.prototype = new Error;
            FS.ErrnoError.prototype.constructor = FS.ErrnoError;
            [44].forEach(e=>{
                FS.genericErrors[e] = new FS.ErrnoError(e);
                FS.genericErrors[e].stack = "<generic error, no stack>"
            }
            )
        }
    },
    staticInit() {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
        FS.filesystems = {
            MEMFS: MEMFS
        }
    },
    init(e, t, r) {
        FS.init.initialized = !0;
        FS.ensureErrnoError();
        Module.stdin = e || Module.stdin;
        Module.stdout = t || Module.stdout;
        Module.stderr = r || Module.stderr;
        FS.createStandardStreams()
    },
    quit() {
        FS.init.initialized = !1;
        for (var e = 0; e < FS.streams.length; e++) {
            var t = FS.streams[e];
            t && FS.close(t)
        }
    },
    findObject(e, t) {
        var r = FS.analyzePath(e, t);
        return r.exists ? r.object : null
    },
    analyzePath(e, t) {
        try {
            e = (n = FS.lookupPath(e, {
                follow: !t
            })).path
        } catch (e) {}
        var r = {
            isRoot: !1,
            exists: !1,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: !1,
            parentPath: null,
            parentObject: null
        };
        try {
            var n = FS.lookupPath(e, {
                parent: !0
            });
            r.parentExists = !0;
            r.parentPath = n.path;
            r.parentObject = n.node;
            r.name = PATH.basename(e);
            n = FS.lookupPath(e, {
                follow: !t
            });
            r.exists = !0;
            r.path = n.path;
            r.object = n.node;
            r.name = n.node.name;
            r.isRoot = "/" === n.path
        } catch (e) {
            r.error = e.errno
        }
        return r
    },
    createPath(e, t, r, n) {
        e = "string" == typeof e ? e : FS.getPath(e);
        for (var o = t.split("/").reverse(); o.length; ) {
            var i = o.pop();
            if (i) {
                var a = PATH.join2(e, i);
                try {
                    FS.mkdir(a)
                } catch (e) {}
                e = a
            }
        }
        return a
    },
    createFile(e, t, r, n, o) {
        var i = PATH.join2("string" == typeof e ? e : FS.getPath(e), t)
          , a = FS_getMode(n, o);
        return FS.create(i, a)
    },
    createDataFile(e, t, r, n, o, i) {
        var a = t;
        if (e) {
            e = "string" == typeof e ? e : FS.getPath(e);
            a = t ? PATH.join2(e, t) : e
        }
        var s = FS_getMode(n, o)
          , u = FS.create(a, s);
        if (r) {
            if ("string" == typeof r) {
                for (var l = new Array(r.length), c = 0, d = r.length; c < d; ++c)
                    l[c] = r.charCodeAt(c);
                r = l
            }
            FS.chmod(u, 146 | s);
            var h = FS.open(u, 577);
            FS.write(h, r, 0, r.length, 0, i);
            FS.close(h);
            FS.chmod(u, s)
        }
        return u
    },
    createDevice(e, t, r, n) {
        var o = PATH.join2("string" == typeof e ? e : FS.getPath(e), t)
          , i = FS_getMode(!!r, !!n);
        FS.createDevice.major || (FS.createDevice.major = 64);
        var a = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(a, {
            open(e) {
                e.seekable = !1
            },
            close(e) {
                n && n.buffer && n.buffer.length && n(10)
            },
            read(e, t, n, o, i) {
                for (var a = 0, s = 0; s < o; s++) {
                    var u;
                    try {
                        u = r()
                    } catch (e) {
                        throw new FS.ErrnoError(29)
                    }
                    if (void 0 === u && 0 === a)
                        throw new FS.ErrnoError(6);
                    if (null == u)
                        break;
                    a++;
                    t[n + s] = u
                }
                a && (e.node.timestamp = Date.now());
                return a
            },
            write(e, t, r, o, i) {
                for (var a = 0; a < o; a++)
                    try {
                        n(t[r + a])
                    } catch (e) {
                        throw new FS.ErrnoError(29)
                    }
                o && (e.node.timestamp = Date.now());
                return a
            }
        });
        return FS.mkdev(o, i, a)
    },
    forceLoadFile(e) {
        if (e.isDevice || e.isFolder || e.link || e.contents)
            return !0;
        if ("undefined" != typeof XMLHttpRequest)
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        if (!read_)
            throw new Error("Cannot load without read() or XMLHttpRequest.");
        try {
            e.contents = intArrayFromString(read_(e.url), !0);
            e.usedBytes = e.contents.length
        } catch (e) {
            throw new FS.ErrnoError(29)
        }
    },
    createLazyFile(e, t, r, n, o) {
        function i() {
            this.lengthKnown = !1;
            this.chunks = []
        }
        i.prototype.get = function(e) {
            if (!(e > this.length - 1 || e < 0)) {
                var t = e % this.chunkSize
                  , r = e / this.chunkSize | 0;
                return this.getter(r)[t]
            }
        }
        ;
        i.prototype.setDataGetter = function(e) {
            this.getter = e
        }
        ;
        i.prototype.cacheLength = function() {
            var e = new XMLHttpRequest;
            e.open("HEAD", r, !1);
            e.send(null);
            if (!(e.status >= 200 && e.status < 300 || 304 === e.status))
                throw new Error("Couldn't load " + r + ". Status: " + e.status);
            var t, n = Number(e.getResponseHeader("Content-length")), o = (t = e.getResponseHeader("Accept-Ranges")) && "bytes" === t, i = (t = e.getResponseHeader("Content-Encoding")) && "gzip" === t, a = 1048576;
            o || (a = n);
            var s = this;
            s.setDataGetter(e=>{
                var t = e * a
                  , o = (e + 1) * a - 1;
                o = Math.min(o, n - 1);
                void 0 === s.chunks[e] && (s.chunks[e] = ((e,t)=>{
                    if (e > t)
                        throw new Error("invalid range (" + e + ", " + t + ") or no bytes requested!");
                    if (t > n - 1)
                        throw new Error("only " + n + " bytes available! programmer error!");
                    var o = new XMLHttpRequest;
                    o.open("GET", r, !1);
                    n !== a && o.setRequestHeader("Range", "bytes=" + e + "-" + t);
                    o.responseType = "arraybuffer";
                    o.overrideMimeType && o.overrideMimeType("text/plain; charset=x-user-defined");
                    o.send(null);
                    if (!(o.status >= 200 && o.status < 300 || 304 === o.status))
                        throw new Error("Couldn't load " + r + ". Status: " + o.status);
                    return void 0 !== o.response ? new Uint8Array(o.response || []) : intArrayFromString(o.responseText || "", !0)
                }
                )(t, o));
                if (void 0 === s.chunks[e])
                    throw new Error("doXHR failed!");
                return s.chunks[e]
            }
            );
            if (i || !n) {
                a = n = 1;
                n = this.getter(0).length;
                a = n;
                out("LazyFiles on gzip forces download of the whole file when length is accessed")
            }
            this._length = n;
            this._chunkSize = a;
            this.lengthKnown = !0
        }
        ;
        if ("undefined" != typeof XMLHttpRequest) {
            if (!ENVIRONMENT_IS_WORKER)
                throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var a = new i;
            Object.defineProperties(a, {
                length: {
                    get: function() {
                        this.lengthKnown || this.cacheLength();
                        return this._length
                    }
                },
                chunkSize: {
                    get: function() {
                        this.lengthKnown || this.cacheLength();
                        return this._chunkSize
                    }
                }
            });
            var s = {
                isDevice: !1,
                contents: a
            }
        } else
            s = {
                isDevice: !1,
                url: r
            };
        var u = FS.createFile(e, t, s, n, o);
        if (s.contents)
            u.contents = s.contents;
        else if (s.url) {
            u.contents = null;
            u.url = s.url
        }
        Object.defineProperties(u, {
            usedBytes: {
                get: function() {
                    return this.contents.length
                }
            }
        });
        var l = {};
        Object.keys(u.stream_ops).forEach(e=>{
            var t = u.stream_ops[e];
            l[e] = function() {
                FS.forceLoadFile(u);
                return t.apply(null, arguments)
            }
        }
        );
        function c(e, t, r, n, o) {
            var i = e.node.contents;
            if (o >= i.length)
                return 0;
            var a = Math.min(i.length - o, n);
            if (i.slice)
                for (var s = 0; s < a; s++)
                    t[r + s] = i[o + s];
            else
                for (s = 0; s < a; s++)
                    t[r + s] = i.get(o + s);
            return a
        }
        l.read = (e,t,r,n,o)=>{
            FS.forceLoadFile(u);
            return c(e, t, r, n, o)
        }
        ;
        l.mmap = (e,t,r,n,o)=>{
            FS.forceLoadFile(u);
            var i = mmapAlloc(t);
            if (!i)
                throw new FS.ErrnoError(48);
            c(e, HEAP8, i, t, r);
            return {
                ptr: i,
                allocated: !0
            }
        }
        ;
        u.stream_ops = l;
        return u
    }
}
  , UTF8ToString = (e,t)=>e ? UTF8ArrayToString(HEAPU8, e, t) : ""
  , SYSCALLS = {
    DEFAULT_POLLMASK: 5,
    calculateAt(e, t, r) {
        if (PATH.isAbs(t))
            return t;
        var n;
        if (-100 === e)
            n = FS.cwd();
        else {
            n = SYSCALLS.getStreamFromFD(e).path
        }
        if (0 == t.length) {
            if (!r)
                throw new FS.ErrnoError(44);
            return n
        }
        return PATH.join2(n, t)
    },
    doStat(e, t, r) {
        try {
            var n = e(t)
        } catch (e) {
            if (e && e.node && PATH.normalize(t) !== PATH.normalize(FS.getPath(e.node)))
                return -54;
            throw e
        }
        HEAP32[r >> 2] = n.dev;
        HEAP32[r + 4 >> 2] = n.mode;
        HEAPU32[r + 8 >> 2] = n.nlink;
        HEAP32[r + 12 >> 2] = n.uid;
        HEAP32[r + 16 >> 2] = n.gid;
        HEAP32[r + 20 >> 2] = n.rdev;
        tempI64 = [n.size >>> 0, (tempDouble = n.size,
        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
        HEAP32[r + 24 >> 2] = tempI64[0],
        HEAP32[r + 28 >> 2] = tempI64[1];
        HEAP32[r + 32 >> 2] = 4096;
        HEAP32[r + 36 >> 2] = n.blocks;
        var o = n.atime.getTime()
          , i = n.mtime.getTime()
          , a = n.ctime.getTime();
        tempI64 = [Math.floor(o / 1e3) >>> 0, (tempDouble = Math.floor(o / 1e3),
        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
        HEAP32[r + 40 >> 2] = tempI64[0],
        HEAP32[r + 44 >> 2] = tempI64[1];
        HEAPU32[r + 48 >> 2] = o % 1e3 * 1e3;
        tempI64 = [Math.floor(i / 1e3) >>> 0, (tempDouble = Math.floor(i / 1e3),
        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
        HEAP32[r + 56 >> 2] = tempI64[0],
        HEAP32[r + 60 >> 2] = tempI64[1];
        HEAPU32[r + 64 >> 2] = i % 1e3 * 1e3;
        tempI64 = [Math.floor(a / 1e3) >>> 0, (tempDouble = Math.floor(a / 1e3),
        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
        HEAP32[r + 72 >> 2] = tempI64[0],
        HEAP32[r + 76 >> 2] = tempI64[1];
        HEAPU32[r + 80 >> 2] = a % 1e3 * 1e3;
        tempI64 = [n.ino >>> 0, (tempDouble = n.ino,
        +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
        HEAP32[r + 88 >> 2] = tempI64[0],
        HEAP32[r + 92 >> 2] = tempI64[1];
        return 0
    },
    doMsync(e, t, r, n, o) {
        if (!FS.isFile(t.node.mode))
            throw new FS.ErrnoError(43);
        if (2 & n)
            return 0;
        var i = HEAPU8.slice(e, e + r);
        FS.msync(t, i, o, r, n)
    },
    varargs: void 0,
    get() {
        var e = HEAP32[SYSCALLS.varargs >> 2];
        SYSCALLS.varargs += 4;
        return e
    },
    getp: ()=>SYSCALLS.get(),
    getStr: e=>UTF8ToString(e),
    getStreamFromFD: e=>FS.getStreamChecked(e)
}
  , exitJS = (e,t)=>{
    EXITSTATUS = e;
    (e=>{
        EXITSTATUS = e;
        if (!keepRuntimeAlive()) {
            Module.onExit && Module.onExit(e);
            ABORT = !0
        }
        quit_(e, new ExitStatus(e))
    }
    )(e)
}
  , _exit = exitJS
  , callUserCallback = e=>{
    if (!ABORT)
        try {
            e();
            (()=>{
                if (!keepRuntimeAlive())
                    try {
                        _exit(EXITSTATUS)
                    } catch (e) {
                        handleException(e)
                    }
            }
            )()
        } catch (e) {
            handleException(e)
        }
}
  , safeSetTimeout = (e,t)=>setTimeout(()=>{
    callUserCallback(e)
}
, t)
  , warnOnce = e=>{
    warnOnce.shown || (warnOnce.shown = {});
    if (!warnOnce.shown[e]) {
        warnOnce.shown[e] = 1;
        err(e)
    }
}
  , Browser = {
    mainLoop: {
        running: !1,
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause() {
            Browser.mainLoop.scheduler = null;
            Browser.mainLoop.currentlyRunningMainloop++
        },
        resume() {
            Browser.mainLoop.currentlyRunningMainloop++;
            var e = Browser.mainLoop.timingMode
              , t = Browser.mainLoop.timingValue
              , r = Browser.mainLoop.func;
            Browser.mainLoop.func = null;
            ((e,t,r,n,o)=>{
                assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
                Browser.mainLoop.func = e;
                Browser.mainLoop.arg = n;
                var i = Browser.mainLoop.currentlyRunningMainloop;
                function a() {
                    return !(i < Browser.mainLoop.currentlyRunningMainloop)
                }
                Browser.mainLoop.running = !1;
                Browser.mainLoop.runner = function() {
                    if (!ABORT)
                        if (Browser.mainLoop.queue.length > 0) {
                            Date.now();
                            var t = Browser.mainLoop.queue.shift();
                            t.func(t.arg);
                            if (Browser.mainLoop.remainingBlockers) {
                                var r = Browser.mainLoop.remainingBlockers
                                  , n = r % 1 == 0 ? r - 1 : Math.floor(r);
                                if (t.counted)
                                    Browser.mainLoop.remainingBlockers = n;
                                else {
                                    n += .5;
                                    Browser.mainLoop.remainingBlockers = (8 * r + n) / 9
                                }
                            }
                            Browser.mainLoop.updateStatus();
                            if (!a())
                                return;
                            setTimeout(Browser.mainLoop.runner, 0)
                        } else if (a()) {
                            Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
                            if (1 == Browser.mainLoop.timingMode && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0)
                                Browser.mainLoop.scheduler();
                            else {
                                0 == Browser.mainLoop.timingMode && (Browser.mainLoop.tickStartTime = _emscripten_get_now());
                                Browser.mainLoop.runIter(e);
                                if (a()) {
                                    "object" == typeof SDL && SDL.audio && SDL.audio.queueNewAudioData && SDL.audio.queueNewAudioData();
                                    Browser.mainLoop.scheduler()
                                }
                            }
                        }
                }
                ;
                if (!o) {
                    t && t > 0 ? _emscripten_set_main_loop_timing(0, 1e3 / t) : _emscripten_set_main_loop_timing(1, 1);
                    Browser.mainLoop.scheduler()
                }
                if (r)
                    throw "unwind"
            }
            )(r, 0, !1, Browser.mainLoop.arg, !0);
            _emscripten_set_main_loop_timing(e, t);
            Browser.mainLoop.scheduler()
        },
        updateStatus() {
            if (Module.setStatus) {
                var e = Module.statusMessage || "Please wait..."
                  , t = Browser.mainLoop.remainingBlockers
                  , r = Browser.mainLoop.expectedBlockers;
                t ? t < r ? Module.setStatus(e + " (" + (r - t) + "/" + r + ")") : Module.setStatus(e) : Module.setStatus("")
            }
        },
        runIter(e) {
            if (!ABORT) {
                if (Module.preMainLoop) {
                    if (!1 === Module.preMainLoop())
                        return
                }
                callUserCallback(e);
                Module.postMainLoop && Module.postMainLoop()
            }
        }
    },
    isFullscreen: !1,
    pointerLock: !1,
    moduleContextCreatedCallbacks: [],
    workers: [],
    init() {
        if (!Browser.initted) {
            Browser.initted = !0;
            var e = {
                canHandle: function(e) {
                    return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(e)
                },
                handle: function(e, t, r, n) {
                    var o = new Blob([e],{
                        type: Browser.getMimetype(t)
                    });
                    o.size !== e.length && (o = new Blob([new Uint8Array(e).buffer],{
                        type: Browser.getMimetype(t)
                    }));
                    var i = URL.createObjectURL(o)
                      , a = new Image;
                    a.onload = ()=>{
                        assert(a.complete, `Image ${t} could not be decoded`);
                        var n = document.createElement("canvas");
                        n.width = a.width;
                        n.height = a.height;
                        n.getContext("2d").drawImage(a, 0, 0);
                        preloadedImages[t] = n;
                        URL.revokeObjectURL(i);
                        r && r(e)
                    }
                    ;
                    a.onerror = e=>{
                        err(`Image ${i} could not be decoded`);
                        n && n()
                    }
                    ;
                    a.src = i
                }
            };
            preloadPlugins.push(e);
            var t = {
                canHandle: function(e) {
                    return !Module.noAudioDecoding && e.substr(-4)in {
                        ".ogg": 1,
                        ".wav": 1,
                        ".mp3": 1
                    }
                },
                handle: function(e, t, r, n) {
                    var o = !1;
                    function i(n) {
                        if (!o) {
                            o = !0;
                            preloadedAudios[t] = n;
                            r && r(e)
                        }
                    }
                    var a = new Blob([e],{
                        type: Browser.getMimetype(t)
                    })
                      , s = URL.createObjectURL(a)
                      , u = new Audio;
                    u.addEventListener("canplaythrough", ()=>i(u), !1);
                    u.onerror = function(r) {
                        if (!o) {
                            err(`warning: browser could not fully decode audio ${t}, trying slower base64 approach`);
                            u.src = "data:audio/x-" + t.substr(-3) + ";base64," + function(e) {
                                for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r = "", n = 0, o = 0, i = 0; i < e.length; i++) {
                                    n = n << 8 | e[i];
                                    o += 8;
                                    for (; o >= 6; ) {
                                        var a = n >> o - 6 & 63;
                                        o -= 6;
                                        r += t[a]
                                    }
                                }
                                if (2 == o) {
                                    r += t[(3 & n) << 4];
                                    r += "=="
                                } else if (4 == o) {
                                    r += t[(15 & n) << 2];
                                    r += "="
                                }
                                return r
                            }(e);
                            i(u)
                        }
                    }
                    ;
                    u.src = s;
                    safeSetTimeout(()=>{
                        i(u)
                    }
                    , 1e4)
                }
            };
            preloadPlugins.push(t);
            var r = Module.canvas;
            if (r) {
                r.requestPointerLock = r.requestPointerLock || r.mozRequestPointerLock || r.webkitRequestPointerLock || r.msRequestPointerLock || (()=>{}
                );
                r.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock || document.msExitPointerLock || (()=>{}
                );
                r.exitPointerLock = r.exitPointerLock.bind(document);
                document.addEventListener("pointerlockchange", n, !1);
                document.addEventListener("mozpointerlockchange", n, !1);
                document.addEventListener("webkitpointerlockchange", n, !1);
                document.addEventListener("mspointerlockchange", n, !1);
                Module.elementPointerLock && r.addEventListener("click", e=>{
                    if (!Browser.pointerLock && Module.canvas.requestPointerLock) {
                        Module.canvas.requestPointerLock();
                        e.preventDefault()
                    }
                }
                , !1)
            }
        }
        function n() {
            Browser.pointerLock = document.pointerLockElement === Module.canvas || document.mozPointerLockElement === Module.canvas || document.webkitPointerLockElement === Module.canvas || document.msPointerLockElement === Module.canvas
        }
    },
    createContext(e, t, r, n) {
        if (t && Module.ctx && e == Module.canvas)
            return Module.ctx;
        var o, i;
        if (t) {
            var a = {
                antialias: !1,
                alpha: !1,
                majorVersion: 1
            };
            if (n)
                for (var s in n)
                    a[s] = n[s];
            "undefined" != typeof GL && (i = GL.createContext(e, a)) && (o = GL.getContext(i).GLctx)
        } else
            o = e.getContext("2d");
        if (!o)
            return null;
        if (r) {
            t || assert("undefined" == typeof GLctx, "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
            Module.ctx = o;
            t && GL.makeContextCurrent(i);
            Module.useWebGL = t;
            Browser.moduleContextCreatedCallbacks.forEach(e=>e());
            Browser.init()
        }
        return o
    },
    destroyContext(e, t, r) {},
    fullscreenHandlersInstalled: !1,
    lockPointer: void 0,
    resizeCanvas: void 0,
    requestFullscreen(e, t) {
        Browser.lockPointer = e;
        Browser.resizeCanvas = t;
        void 0 === Browser.lockPointer && (Browser.lockPointer = !0);
        void 0 === Browser.resizeCanvas && (Browser.resizeCanvas = !1);
        var r = Module.canvas;
        function n() {
            Browser.isFullscreen = !1;
            var e = r.parentNode;
            if ((document.fullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.webkitCurrentFullScreenElement) === e) {
                r.exitFullscreen = Browser.exitFullscreen;
                Browser.lockPointer && r.requestPointerLock();
                Browser.isFullscreen = !0;
                Browser.resizeCanvas ? Browser.setFullscreenCanvasSize() : Browser.updateCanvasDimensions(r)
            } else {
                e.parentNode.insertBefore(r, e);
                e.parentNode.removeChild(e);
                Browser.resizeCanvas ? Browser.setWindowedCanvasSize() : Browser.updateCanvasDimensions(r)
            }
            Module.onFullScreen && Module.onFullScreen(Browser.isFullscreen);
            Module.onFullscreen && Module.onFullscreen(Browser.isFullscreen)
        }
        if (!Browser.fullscreenHandlersInstalled) {
            Browser.fullscreenHandlersInstalled = !0;
            document.addEventListener("fullscreenchange", n, !1);
            document.addEventListener("mozfullscreenchange", n, !1);
            document.addEventListener("webkitfullscreenchange", n, !1);
            document.addEventListener("MSFullscreenChange", n, !1)
        }
        var o = document.createElement("div");
        r.parentNode.insertBefore(o, r);
        o.appendChild(r);
        o.requestFullscreen = o.requestFullscreen || o.mozRequestFullScreen || o.msRequestFullscreen || (o.webkitRequestFullscreen ? ()=>o.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT) : null) || (o.webkitRequestFullScreen ? ()=>o.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT) : null);
        o.requestFullscreen()
    },
    exitFullscreen() {
        if (!Browser.isFullscreen)
            return !1;
        (document.exitFullscreen || document.cancelFullScreen || document.mozCancelFullScreen || document.msExitFullscreen || document.webkitCancelFullScreen || (()=>{}
        )).apply(document, []);
        return !0
    },
    nextRAF: 0,
    fakeRequestAnimationFrame(e) {
        var t = Date.now();
        if (0 === Browser.nextRAF)
            Browser.nextRAF = t + 1e3 / 60;
        else
            for (; t + 2 >= Browser.nextRAF; )
                Browser.nextRAF += 1e3 / 60;
        var r = Math.max(Browser.nextRAF - t, 0);
        setTimeout(e, r)
    },
    requestAnimationFrame(e) {
        if ("function" != typeof requestAnimationFrame) {
            (0,
            Browser.fakeRequestAnimationFrame)(e)
        } else
            requestAnimationFrame(e)
    },
    safeSetTimeout: (e,t)=>safeSetTimeout(e, t),
    safeRequestAnimationFrame: e=>Browser.requestAnimationFrame(()=>{
        callUserCallback(e)
    }
    ),
    getMimetype: e=>({
        jpg: "image/jpeg",
        jpeg: "image/jpeg",
        png: "image/png",
        bmp: "image/bmp",
        ogg: "audio/ogg",
        wav: "audio/wav",
        mp3: "audio/mpeg"
    })[e.substr(e.lastIndexOf(".") + 1)],
    getUserMedia(e) {
        window.getUserMedia || (window.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia);
        window.getUserMedia(e)
    },
    getMovementX: e=>e.movementX || e.mozMovementX || e.webkitMovementX || 0,
    getMovementY: e=>e.movementY || e.mozMovementY || e.webkitMovementY || 0,
    getMouseWheelDelta(e) {
        var t = 0;
        switch (e.type) {
        case "DOMMouseScroll":
            t = e.detail / 3;
            break;
        case "mousewheel":
            t = e.wheelDelta / 120;
            break;
        case "wheel":
            t = e.deltaY;
            switch (e.deltaMode) {
            case 0:
                t /= 100;
                break;
            case 1:
                t /= 3;
                break;
            case 2:
                t *= 80;
                break;
            default:
                throw "unrecognized mouse wheel delta mode: " + e.deltaMode
            }
            break;
        default:
            throw "unrecognized mouse wheel event: " + e.type
        }
        return t
    },
    mouseX: 0,
    mouseY: 0,
    mouseMovementX: 0,
    mouseMovementY: 0,
    touches: {},
    lastTouches: {},
    calculateMouseEvent(e) {
        if (Browser.pointerLock) {
            if ("mousemove" != e.type && "mozMovementX"in e)
                Browser.mouseMovementX = Browser.mouseMovementY = 0;
            else {
                Browser.mouseMovementX = Browser.getMovementX(e);
                Browser.mouseMovementY = Browser.getMovementY(e)
            }
            if ("undefined" != typeof SDL) {
                Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
            } else {
                Browser.mouseX += Browser.mouseMovementX;
                Browser.mouseY += Browser.mouseMovementY
            }
        } else {
            var t = Module.canvas.getBoundingClientRect()
              , r = Module.canvas.width
              , n = Module.canvas.height
              , o = void 0 !== window.scrollX ? window.scrollX : window.pageXOffset
              , i = void 0 !== window.scrollY ? window.scrollY : window.pageYOffset;
            if ("touchstart" === e.type || "touchend" === e.type || "touchmove" === e.type) {
                var a = e.touch;
                if (void 0 === a)
                    return;
                var s = a.pageX - (o + t.left)
                  , u = a.pageY - (i + t.top)
                  , l = {
                    x: s *= r / t.width,
                    y: u *= n / t.height
                };
                if ("touchstart" === e.type) {
                    Browser.lastTouches[a.identifier] = l;
                    Browser.touches[a.identifier] = l
                } else if ("touchend" === e.type || "touchmove" === e.type) {
                    var c = Browser.touches[a.identifier];
                    c || (c = l);
                    Browser.lastTouches[a.identifier] = c;
                    Browser.touches[a.identifier] = l
                }
                return
            }
            var d = e.pageX - (o + t.left)
              , h = e.pageY - (i + t.top);
            d *= r / t.width;
            h *= n / t.height;
            Browser.mouseMovementX = d - Browser.mouseX;
            Browser.mouseMovementY = h - Browser.mouseY;
            Browser.mouseX = d;
            Browser.mouseY = h
        }
    },
    resizeListeners: [],
    updateResizeListeners() {
        var e = Module.canvas;
        Browser.resizeListeners.forEach(t=>t(e.width, e.height))
    },
    setCanvasSize(e, t, r) {
        var n = Module.canvas;
        Browser.updateCanvasDimensions(n, e, t);
        r || Browser.updateResizeListeners()
    },
    windowedWidth: 0,
    windowedHeight: 0,
    setFullscreenCanvasSize() {
        if ("undefined" != typeof SDL) {
            var e = HEAPU32[SDL.screen >> 2];
            e |= 8388608;
            HEAP32[SDL.screen >> 2] = e
        }
        Browser.updateCanvasDimensions(Module.canvas);
        Browser.updateResizeListeners()
    },
    setWindowedCanvasSize() {
        if ("undefined" != typeof SDL) {
            var e = HEAPU32[SDL.screen >> 2];
            e &= -8388609;
            HEAP32[SDL.screen >> 2] = e
        }
        Browser.updateCanvasDimensions(Module.canvas);
        Browser.updateResizeListeners()
    },
    updateCanvasDimensions(e, t, r) {
        if (t && r) {
            e.widthNative = t;
            e.heightNative = r
        } else {
            t = e.widthNative;
            r = e.heightNative
        }
        var n = t
          , o = r;
        Module.forcedAspectRatio && Module.forcedAspectRatio > 0 && (n / o < Module.forcedAspectRatio ? n = Math.round(o * Module.forcedAspectRatio) : o = Math.round(n / Module.forcedAspectRatio));
        if ((document.fullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.webkitCurrentFullScreenElement) === e.parentNode && void 0 !== screen) {
            var i = Math.min(screen.width / n, screen.height / o);
            n = Math.round(n * i);
            o = Math.round(o * i)
        }
        if (Browser.resizeCanvas) {
            e.width != n && (e.width = n);
            e.height != o && (e.height = o);
            if (void 0 !== e.style) {
                e.style.removeProperty("width");
                e.style.removeProperty("height")
            }
        } else {
            e.width != t && (e.width = t);
            e.height != r && (e.height = r);
            if (void 0 !== e.style)
                if (n != t || o != r) {
                    e.style.setProperty("width", n + "px", "important");
                    e.style.setProperty("height", o + "px", "important")
                } else {
                    e.style.removeProperty("width");
                    e.style.removeProperty("height")
                }
        }
    }
}
  , callRuntimeCallbacks = e=>{
    for (; e.length > 0; )
        e.shift()(Module)
}
  , exceptionCaught = []
  , uncaughtExceptionCount = 0
  , exceptionLast = 0;
function ExceptionInfo(e) {
    this.excPtr = e;
    this.ptr = e - 24;
    this.set_type = function(e) {
        HEAPU32[this.ptr + 4 >> 2] = e
    }
    ;
    this.get_type = function() {
        return HEAPU32[this.ptr + 4 >> 2]
    }
    ;
    this.set_destructor = function(e) {
        HEAPU32[this.ptr + 8 >> 2] = e
    }
    ;
    this.get_destructor = function() {
        return HEAPU32[this.ptr + 8 >> 2]
    }
    ;
    this.set_caught = function(e) {
        e = e ? 1 : 0;
        HEAP8[this.ptr + 12 >> 0] = e
    }
    ;
    this.get_caught = function() {
        return 0 != HEAP8[this.ptr + 12 >> 0]
    }
    ;
    this.set_rethrown = function(e) {
        e = e ? 1 : 0;
        HEAP8[this.ptr + 13 >> 0] = e
    }
    ;
    this.get_rethrown = function() {
        return 0 != HEAP8[this.ptr + 13 >> 0]
    }
    ;
    this.init = function(e, t) {
        this.set_adjusted_ptr(0);
        this.set_type(e);
        this.set_destructor(t)
    }
    ;
    this.set_adjusted_ptr = function(e) {
        HEAPU32[this.ptr + 16 >> 2] = e
    }
    ;
    this.get_adjusted_ptr = function() {
        return HEAPU32[this.ptr + 16 >> 2]
    }
    ;
    this.get_exception_ptr = function() {
        if (___cxa_is_pointer_type(this.get_type()))
            return HEAPU32[this.excPtr >> 2];
        var e = this.get_adjusted_ptr();
        return 0 !== e ? e : this.excPtr
    }
}
var findMatchingCatch = e=>{
    var t = exceptionLast;
    if (!t) {
        setTempRet0(0);
        return 0
    }
    var r = new ExceptionInfo(t);
    r.set_adjusted_ptr(t);
    var n = r.get_type();
    if (!n) {
        setTempRet0(0);
        return t
    }
    for (var o in e) {
        var i = e[o];
        if (0 === i || i === n)
            break;
        var a = r.ptr + 16;
        if (___cxa_can_catch(i, n, a)) {
            setTempRet0(i);
            return t
        }
    }
    setTempRet0(n);
    return t
}
;
var stringToUTF8 = (e,t,r)=>stringToUTF8Array(e, HEAPU8, t, r)
  , isLeapYear = e=>e % 4 == 0 && (e % 100 != 0 || e % 400 == 0)
  , MONTH_DAYS_LEAP_CUMULATIVE = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]
  , MONTH_DAYS_REGULAR_CUMULATIVE = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]
  , ydayFromDate = e=>{
    return (isLeapYear(e.getFullYear()) ? MONTH_DAYS_LEAP_CUMULATIVE : MONTH_DAYS_REGULAR_CUMULATIVE)[e.getMonth()] + e.getDate() - 1
}
  , convertI32PairToI53Checked = (e,t)=>t + 2097152 >>> 0 < 4194305 - !!e ? (e >>> 0) + 4294967296 * t : NaN;
var stringToNewUTF8 = e=>{
    var t = lengthBytesUTF8(e) + 1
      , r = _malloc(t);
    r && stringToUTF8(e, r, t);
    return r
}
  , growMemory = e=>{
    var t = (e - wasmMemory.buffer.byteLength + 65535) / 65536;
    try {
        wasmMemory.grow(t);
        updateMemoryViews();
        return 1
    } catch (e) {}
}
  , ENV = {}
  , getExecutableName = ()=>thisProgram || "./this.program"
  , getEnvStrings = ()=>{
    if (!getEnvStrings.strings) {
        var e = {
            USER: "web_user",
            LOGNAME: "web_user",
            PATH: "/",
            PWD: "/",
            HOME: "/home/web_user",
            LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
            _: getExecutableName()
        };
        for (var t in ENV)
            void 0 === ENV[t] ? delete e[t] : e[t] = ENV[t];
        var r = [];
        for (var t in e)
            r.push(`${t}=${e[t]}`);
        getEnvStrings.strings = r
    }
    return getEnvStrings.strings
}
;
var doReadv = (e,t,r,n)=>{
    for (var o = 0, i = 0; i < r; i++) {
        var a = HEAPU32[t >> 2]
          , s = HEAPU32[t + 4 >> 2];
        t += 8;
        var u = FS.read(e, HEAP8, a, s, n);
        if (u < 0)
            return -1;
        o += u;
        if (u < s)
            break;
        void 0 !== n && (n += u)
    }
    return o
}
;
var doWritev = (e,t,r,n)=>{
    for (var o = 0, i = 0; i < r; i++) {
        var a = HEAPU32[t >> 2]
          , s = HEAPU32[t + 4 >> 2];
        t += 8;
        var u = FS.write(e, HEAP8, a, s, n);
        if (u < 0)
            return -1;
        o += u;
        void 0 !== n && (n += u)
    }
    return o
}
;
var MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  , MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  , addDays = (e,t)=>{
    for (var r = new Date(e.getTime()); t > 0; ) {
        var n = isLeapYear(r.getFullYear())
          , o = r.getMonth()
          , i = (n ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[o];
        if (!(t > i - r.getDate())) {
            r.setDate(r.getDate() + t);
            return r
        }
        t -= i - r.getDate() + 1;
        r.setDate(1);
        if (o < 11)
            r.setMonth(o + 1);
        else {
            r.setMonth(0);
            r.setFullYear(r.getFullYear() + 1)
        }
    }
    return r
}
  , _strftime = (e,t,r,n)=>{
    var o = HEAPU32[n + 40 >> 2]
      , i = {
        tm_sec: HEAP32[n >> 2],
        tm_min: HEAP32[n + 4 >> 2],
        tm_hour: HEAP32[n + 8 >> 2],
        tm_mday: HEAP32[n + 12 >> 2],
        tm_mon: HEAP32[n + 16 >> 2],
        tm_year: HEAP32[n + 20 >> 2],
        tm_wday: HEAP32[n + 24 >> 2],
        tm_yday: HEAP32[n + 28 >> 2],
        tm_isdst: HEAP32[n + 32 >> 2],
        tm_gmtoff: HEAP32[n + 36 >> 2],
        tm_zone: o ? UTF8ToString(o) : ""
    }
      , a = UTF8ToString(r)
      , s = {
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m/%d/%y",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%r": "%I:%M:%S %p",
        "%R": "%H:%M",
        "%T": "%H:%M:%S",
        "%x": "%m/%d/%y",
        "%X": "%H:%M:%S",
        "%Ec": "%c",
        "%EC": "%C",
        "%Ex": "%m/%d/%y",
        "%EX": "%H:%M:%S",
        "%Ey": "%y",
        "%EY": "%Y",
        "%Od": "%d",
        "%Oe": "%e",
        "%OH": "%H",
        "%OI": "%I",
        "%Om": "%m",
        "%OM": "%M",
        "%OS": "%S",
        "%Ou": "%u",
        "%OU": "%U",
        "%OV": "%V",
        "%Ow": "%w",
        "%OW": "%W",
        "%Oy": "%y"
    };
    for (var u in s)
        a = a.replace(new RegExp(u,"g"), s[u]);
    var l = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      , c = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    function d(e, t, r) {
        for (var n = "number" == typeof e ? e.toString() : e || ""; n.length < t; )
            n = r[0] + n;
        return n
    }
    function h(e, t) {
        return d(e, t, "0")
    }
    function m(e, t) {
        function r(e) {
            return e < 0 ? -1 : e > 0 ? 1 : 0
        }
        var n;
        0 === (n = r(e.getFullYear() - t.getFullYear())) && 0 === (n = r(e.getMonth() - t.getMonth())) && (n = r(e.getDate() - t.getDate()));
        return n
    }
    function E(e) {
        switch (e.getDay()) {
        case 0:
            return new Date(e.getFullYear() - 1,11,29);
        case 1:
            return e;
        case 2:
            return new Date(e.getFullYear(),0,3);
        case 3:
            return new Date(e.getFullYear(),0,2);
        case 4:
            return new Date(e.getFullYear(),0,1);
        case 5:
            return new Date(e.getFullYear() - 1,11,31);
        case 6:
            return new Date(e.getFullYear() - 1,11,30)
        }
    }
    function f(e) {
        var t = addDays(new Date(e.tm_year + 1900,0,1), e.tm_yday)
          , r = new Date(t.getFullYear(),0,4)
          , n = new Date(t.getFullYear() + 1,0,4)
          , o = E(r)
          , i = E(n);
        return m(o, t) <= 0 ? m(i, t) <= 0 ? t.getFullYear() + 1 : t.getFullYear() : t.getFullYear() - 1
    }
    var p = {
        "%a": e=>l[e.tm_wday].substring(0, 3),
        "%A": e=>l[e.tm_wday],
        "%b": e=>c[e.tm_mon].substring(0, 3),
        "%B": e=>c[e.tm_mon],
        "%C": e=>{
            return h((e.tm_year + 1900) / 100 | 0, 2)
        }
        ,
        "%d": e=>h(e.tm_mday, 2),
        "%e": e=>d(e.tm_mday, 2, " "),
        "%g": e=>f(e).toString().substring(2),
        "%G": e=>f(e),
        "%H": e=>h(e.tm_hour, 2),
        "%I": e=>{
            var t = e.tm_hour;
            0 == t ? t = 12 : t > 12 && (t -= 12);
            return h(t, 2)
        }
        ,
        "%j": e=>h(e.tm_mday + ((e,t)=>{
            for (var r = 0, n = 0; n <= t; r += e[n++])
                ;
            return r
        }
        )(isLeapYear(e.tm_year + 1900) ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR, e.tm_mon - 1), 3),
        "%m": e=>h(e.tm_mon + 1, 2),
        "%M": e=>h(e.tm_min, 2),
        "%n": ()=>"\n",
        "%p": e=>e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM",
        "%S": e=>h(e.tm_sec, 2),
        "%t": ()=>"\t",
        "%u": e=>e.tm_wday || 7,
        "%U": e=>{
            var t = e.tm_yday + 7 - e.tm_wday;
            return h(Math.floor(t / 7), 2)
        }
        ,
        "%V": e=>{
            var t = Math.floor((e.tm_yday + 7 - (e.tm_wday + 6) % 7) / 7);
            (e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && t++;
            if (t) {
                if (53 == t) {
                    var r = (e.tm_wday + 371 - e.tm_yday) % 7;
                    4 == r || 3 == r && isLeapYear(e.tm_year) || (t = 1)
                }
            } else {
                t = 52;
                var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                (4 == n || 5 == n && isLeapYear(e.tm_year % 400 - 1)) && t++
            }
            return h(t, 2)
        }
        ,
        "%w": e=>e.tm_wday,
        "%W": e=>{
            var t = e.tm_yday + 7 - (e.tm_wday + 6) % 7;
            return h(Math.floor(t / 7), 2)
        }
        ,
        "%y": e=>(e.tm_year + 1900).toString().substring(2),
        "%Y": e=>e.tm_year + 1900,
        "%z": e=>{
            var t = e.tm_gmtoff
              , r = t >= 0;
            t = (t = Math.abs(t) / 60) / 60 * 100 + t % 60;
            return (r ? "+" : "-") + String("0000" + t).slice(-4)
        }
        ,
        "%Z": e=>e.tm_zone,
        "%%": ()=>"%"
    };
    a = a.replace(/%%/g, "\0\0");
    for (var u in p)
        a.includes(u) && (a = a.replace(new RegExp(u,"g"), p[u](i)));
    var _ = intArrayFromString(a = a.replace(/\0\0/g, "%"), !1);
    if (_.length > t)
        return 0;
    ((e,t)=>{
        HEAP8.set(e, t)
    }
    )(_, e);
    return _.length - 1
}
  , stringToUTF8OnStack = e=>{
    var t = lengthBytesUTF8(e) + 1
      , r = stackAlloc(t);
    stringToUTF8(e, r, t);
    return r
}
  , wasmTableMirror = []
  , getWasmTableEntry = e=>{
    var t = wasmTableMirror[e];
    if (!t) {
        e >= wasmTableMirror.length && (wasmTableMirror.length = e + 1);
        wasmTableMirror[e] = t = wasmTable.get(e)
    }
    return t
}
  , ALLOC_NORMAL = 0
  , allocate = (e,t)=>{
    var r;
    r = 1 == t ? stackAlloc(e.length) : _malloc(e.length);
    e.subarray || e.slice || (e = new Uint8Array(e));
    HEAPU8.set(e, r);
    return r
}
;
Module.requestFullscreen = (e,t)=>Browser.requestFullscreen(e, t);
Module.requestAnimationFrame = e=>Browser.requestAnimationFrame(e);
Module.setCanvasSize = (e,t,r)=>Browser.setCanvasSize(e, t, r);
Module.pauseMainLoop = ()=>Browser.mainLoop.pause();
Module.resumeMainLoop = ()=>Browser.mainLoop.resume();
Module.getUserMedia = ()=>Browser.getUserMedia();
Module.createContext = (e,t,r,n)=>Browser.createContext(e, t, r, n);
var preloadedImages = {}
  , preloadedAudios = {}
  , FSNode = function(e, t, r, n) {
    e || (e = this);
    this.parent = e;
    this.mount = e.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = t;
    this.mode = r;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = n
};
Object.defineProperties(FSNode.prototype, {
    read: {
        get: function() {
            return 365 == (365 & this.mode)
        },
        set: function(e) {
            e ? this.mode |= 365 : this.mode &= -366
        }
    },
    write: {
        get: function() {
            return 146 == (146 & this.mode)
        },
        set: function(e) {
            e ? this.mode |= 146 : this.mode &= -147
        }
    },
    isFolder: {
        get: function() {
            return FS.isDir(this.mode)
        }
    },
    isDevice: {
        get: function() {
            return FS.isChrdev(this.mode)
        }
    }
});
FS.FSNode = FSNode;
FS.createPreloadedFile = (e,t,r,n,o,i,a,s,u,l)=>{
    var c = t ? PATH_FS.resolve(PATH.join2(e, t)) : e;
    getUniqueRunDependency(`cp ${c}`);
    function d(r) {
        function d(r) {
            l && l();
            s || FS.createDataFile(e, t, r, n, o, u);
            i && i();
            removeRunDependency()
        }
        FS_handledByPreloadPlugin(r, c, d, ()=>{
            a && a();
            removeRunDependency()
        }
        ) || d(r)
    }
    addRunDependency();
    "string" == typeof r ? ((e,t,r,n)=>{
        var o = n ? "" : getUniqueRunDependency(`al ${e}`);
        readAsync(e, r=>{
            assert(r, `Loading data file "${e}" failed (no arrayBuffer).`);
            t(new Uint8Array(r));
            o && removeRunDependency()
        }
        , t=>{
            if (!r)
                throw `Loading data file "${e}" failed.`;
            r()
        }
        );
        o && addRunDependency()
    }
    )(r, e=>d(e), a) : d(r)
}
;
FS.staticInit();
Module.FS_createDataFile = FS.createDataFile;
Module.FS_unlink = FS.unlink;
var nextRAF, calledRun, wasmImports = {
    n: (e,t,r,n)=>{
        abort(`Assertion failed: ${UTF8ToString(e)}, at: ` + [t ? UTF8ToString(t) : "unknown filename", r, n ? UTF8ToString(n) : "unknown function"])
    }
    ,
    w: e=>{
        var t = new ExceptionInfo(e);
        if (!t.get_caught()) {
            t.set_caught(!0);
            uncaughtExceptionCount--
        }
        t.set_rethrown(!1);
        exceptionCaught.push(t);
        ___cxa_increment_exception_refcount(t.excPtr);
        return t.get_exception_ptr()
    }
    ,
    x: ()=>{
        _setThrew(0, 0);
        var e = exceptionCaught.pop();
        ___cxa_decrement_exception_refcount(e.excPtr);
        exceptionLast = 0
    }
    ,
    a: ()=>findMatchingCatch([]),
    i: e=>findMatchingCatch([e]),
    G: ()=>{
        var e = exceptionCaught.pop();
        e || abort("no exception to throw");
        var t = e.excPtr;
        if (!e.get_rethrown()) {
            exceptionCaught.push(e);
            e.set_rethrown(!0);
            e.set_caught(!1);
            uncaughtExceptionCount++
        }
        throw exceptionLast = t
    }
    ,
    t: (e,t,r)=>{
        new ExceptionInfo(e).init(t, r);
        uncaughtExceptionCount++;
        throw exceptionLast = e
    }
    ,
    ga: ()=>uncaughtExceptionCount,
    d: e=>{
        exceptionLast || (exceptionLast = e);
        throw exceptionLast
    }
    ,
    na: function(e, t, r, n) {
        SYSCALLS.varargs = n;
        try {
            t = SYSCALLS.getStr(t);
            t = SYSCALLS.calculateAt(e, t);
            var o = n ? SYSCALLS.get() : 0;
            return FS.open(t, r, o).fd
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return -e.errno
        }
    },
    ka: (e,t)=>{
        stringToUTF8(thisProgram, e, t)
    }
    ,
    P: function(e, t, r) {
        var n = convertI32PairToI53Checked(e, t)
          , o = new Date(1e3 * n);
        HEAP32[r >> 2] = o.getSeconds();
        HEAP32[r + 4 >> 2] = o.getMinutes();
        HEAP32[r + 8 >> 2] = o.getHours();
        HEAP32[r + 12 >> 2] = o.getDate();
        HEAP32[r + 16 >> 2] = o.getMonth();
        HEAP32[r + 20 >> 2] = o.getFullYear() - 1900;
        HEAP32[r + 24 >> 2] = o.getDay();
        var i = 0 | ydayFromDate(o);
        HEAP32[r + 28 >> 2] = i;
        HEAP32[r + 36 >> 2] = -60 * o.getTimezoneOffset();
        var a = new Date(o.getFullYear(),0,1)
          , s = new Date(o.getFullYear(),6,1).getTimezoneOffset()
          , u = a.getTimezoneOffset()
          , l = 0 | (s != u && o.getTimezoneOffset() == Math.min(u, s));
        HEAP32[r + 32 >> 2] = l
    },
    O: function(e, t, r, n, o, i, a, s) {
        var u = convertI32PairToI53Checked(o, i);
        try {
            if (isNaN(u))
                return 61;
            var l = SYSCALLS.getStreamFromFD(n)
              , c = FS.mmap(l, e, u, t, r)
              , d = c.ptr;
            HEAP32[a >> 2] = c.allocated;
            HEAPU32[s >> 2] = d;
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return -e.errno
        }
    },
    ia: (e,t,r)=>{
        var n = (new Date).getFullYear()
          , o = new Date(n,0,1)
          , i = new Date(n,6,1)
          , a = o.getTimezoneOffset()
          , s = i.getTimezoneOffset()
          , u = Math.max(a, s);
        HEAPU32[e >> 2] = 60 * u;
        HEAP32[t >> 2] = Number(a != s);
        function l(e) {
            var t = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
            return t ? t[1] : "GMT"
        }
        var c = l(o)
          , d = l(i)
          , h = stringToNewUTF8(c)
          , m = stringToNewUTF8(d);
        if (s < a) {
            HEAPU32[r >> 2] = h;
            HEAPU32[r + 4 >> 2] = m
        } else {
            HEAPU32[r >> 2] = m;
            HEAPU32[r + 4 >> 2] = h
        }
    }
    ,
    D: ()=>{
        abort("")
    }
    ,
    oa: ()=>Date.now(),
    ja: ()=>2147483648,
    qa: (e,t,r)=>HEAPU8.copyWithin(e, t, t + r),
    ha: e=>{
        var t = HEAPU8.length;
        if ((e >>>= 0) > 2147483648)
            return !1;
        for (var r = (e,t)=>e + (t - e % t) % t, n = 1; n <= 4; n *= 2) {
            var o = t * (1 + .2 / n);
            o = Math.min(o, e + 100663296);
            var i = Math.min(2147483648, r(Math.max(e, o), 65536));
            if (growMemory(i))
                return !0
        }
        return !1
    }
    ,
    la: (e,t)=>{
        var r = 0;
        getEnvStrings().forEach((n,o)=>{
            var i = t + r;
            HEAPU32[e + 4 * o >> 2] = i;
            ((e,t)=>{
                for (var r = 0; r < e.length; ++r)
                    HEAP8[t++ >> 0] = e.charCodeAt(r);
                HEAP8[t >> 0] = 0
            }
            )(n, i);
            r += n.length + 1
        }
        );
        return 0
    }
    ,
    ma: (e,t)=>{
        var r = getEnvStrings();
        HEAPU32[e >> 2] = r.length;
        var n = 0;
        r.forEach(e=>n += e.length + 1);
        HEAPU32[t >> 2] = n;
        return 0
    }
    ,
    F: function(e) {
        try {
            var t = SYSCALLS.getStreamFromFD(e);
            FS.close(t);
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return e.errno
        }
    },
    N: function(e, t, r, n, o, i) {
        var a = convertI32PairToI53Checked(n, o);
        try {
            if (isNaN(a))
                return 61;
            var s = SYSCALLS.getStreamFromFD(e)
              , u = doReadv(s, t, r, a);
            HEAPU32[i >> 2] = u;
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return e.errno
        }
    },
    ra: function(e, t, r, n) {
        try {
            var o = SYSCALLS.getStreamFromFD(e)
              , i = doReadv(o, t, r);
            HEAPU32[n >> 2] = i;
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return e.errno
        }
    },
    Q: function(e, t, r, n, o) {
        var i = convertI32PairToI53Checked(t, r);
        try {
            if (isNaN(i))
                return 61;
            var a = SYSCALLS.getStreamFromFD(e);
            FS.llseek(a, i, n);
            tempI64 = [a.position >>> 0, (tempDouble = a.position,
            +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? +Math.floor(tempDouble / 4294967296) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)],
            HEAP32[o >> 2] = tempI64[0],
            HEAP32[o + 4 >> 2] = tempI64[1];
            a.getdents && 0 === i && 0 === n && (a.getdents = null);
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return e.errno
        }
    },
    E: function(e, t, r, n) {
        try {
            var o = SYSCALLS.getStreamFromFD(e)
              , i = doWritev(o, t, r);
            HEAPU32[n >> 2] = i;
            return 0
        } catch (e) {
            if (void 0 === FS || "ErrnoError" !== e.name)
                throw e;
            return e.errno
        }
    },
    H: function(e, t, r) {
        var n = stackSave();
        try {
            return getWasmTableEntry(e)(t, r)
        } catch (e) {
            stackRestore(n);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    z: function(e, t, r, n) {
        var o = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    K: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    A: function(e, t, r, n) {
        var o = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    L: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    s: function(e) {
        var t = stackSave();
        try {
            return getWasmTableEntry(e)()
        } catch (e) {
            stackRestore(t);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    e: function(e, t) {
        var r = stackSave();
        try {
            return getWasmTableEntry(e)(t)
        } catch (e) {
            stackRestore(r);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    xa: function(e, t, r) {
        var n = stackSave();
        try {
            return getWasmTableEntry(e)(t, r)
        } catch (e) {
            stackRestore(n);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    b: function(e, t, r) {
        var n = stackSave();
        try {
            return getWasmTableEntry(e)(t, r)
        } catch (e) {
            stackRestore(n);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    f: function(e, t, r, n) {
        var o = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    k: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    fa: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    q: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    v: function(e, t, r, n, o, i, a) {
        var s = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i, a)
        } catch (e) {
            stackRestore(s);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    o: function(e, t, r, n, o, i, a, s) {
        var u = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i, a, s)
        } catch (e) {
            stackRestore(u);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    ta: function(e, t, r, n, o, i, a, s, u, l) {
        var c = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i, a, s, u, l)
        } catch (e) {
            stackRestore(c);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    C: function(e, t, r, n, o, i, a, s, u, l, c, d) {
        var h = stackSave();
        try {
            return getWasmTableEntry(e)(t, r, n, o, i, a, s, u, l, c, d)
        } catch (e) {
            stackRestore(h);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    aa: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            return dynCall_iiiij(e, t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    R: function(e, t, r, n, o, i, a, s) {
        var u = stackSave();
        try {
            return dynCall_iiiijii(e, t, r, n, o, i, a, s)
        } catch (e) {
            stackRestore(u);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    U: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return dynCall_iiij(e, t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    $: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            return dynCall_iiiji(e, t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    ba: function(e, t, r, n) {
        var o = stackSave();
        try {
            return dynCall_iij(e, t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    S: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return dynCall_iiji(e, t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    _: function(e, t, r) {
        var n = stackSave();
        try {
            return dynCall_jii(e, t, r)
        } catch (e) {
            stackRestore(n);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    W: function(e, t, r, n) {
        var o = stackSave();
        try {
            return dynCall_jiii(e, t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    Y: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            return dynCall_jiiii(e, t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    m: function(e) {
        var t = stackSave();
        try {
            getWasmTableEntry(e)()
        } catch (e) {
            stackRestore(t);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    g: function(e, t) {
        var r = stackSave();
        try {
            getWasmTableEntry(e)(t)
        } catch (e) {
            stackRestore(r);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    ua: function(e, t, r, n) {
        var o = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    va: function(e, t, r, n) {
        var o = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    c: function(e, t, r) {
        var n = stackSave();
        try {
            getWasmTableEntry(e)(t, r)
        } catch (e) {
            stackRestore(n);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    h: function(e, t, r, n) {
        var o = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    I: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    J: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    j: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    l: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    r: function(e, t, r, n, o, i, a) {
        var s = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i, a)
        } catch (e) {
            stackRestore(s);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    u: function(e, t, r, n, o, i, a, s) {
        var u = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i, a, s)
        } catch (e) {
            stackRestore(u);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    y: function(e, t, r, n, o, i, a, s, u, l, c) {
        var d = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i, a, s, u, l, c)
        } catch (e) {
            stackRestore(d);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    p: function(e, t, r, n, o, i, a, s, u, l, c, d, h) {
        var m = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i, a, s, u, l, c, d, h)
        } catch (e) {
            stackRestore(m);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    B: function(e, t, r, n, o, i, a, s, u, l, c, d, h, m, E, f) {
        var p = stackSave();
        try {
            getWasmTableEntry(e)(t, r, n, o, i, a, s, u, l, c, d, h, m, E, f)
        } catch (e) {
            stackRestore(p);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    T: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            dynCall_viiij(e, t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    ca: function(e, t, r, n, o, i) {
        var a = stackSave();
        try {
            dynCall_viiji(e, t, r, n, o, i)
        } catch (e) {
            stackRestore(a);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    Z: function(e, t, r, n) {
        var o = stackSave();
        try {
            dynCall_vij(e, t, r, n)
        } catch (e) {
            stackRestore(o);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    V: function(e, t, r, n, o) {
        var i = stackSave();
        try {
            dynCall_viji(e, t, r, n, o)
        } catch (e) {
            stackRestore(i);
            if (e !== e + 0)
                throw e;
            _setThrew(1, 0)
        }
    },
    Ja: function() {
        function e(e, t) {
            var r = new Uint8Array(e);
            console.log("file loaded in onload " + t.name);
            try {
                Module.FS_unlink("/" + t.name)
            } catch (e) {
                console.log(e)
            }
            Module.FS_createDataFile("/", t.name, r, !0, !1, !1);
            var n = allocate(intArrayFromString("/" + t.name), ALLOC_NORMAL);
            !function(e) {
                var t = {};
                Module._sixo_parse_file(e) ? t.PROCESSING_DONE = e + " processed successfully" : t.error = "error parsing apk: " + Module._sixo_get_error();
                postCustomMessage(t)
            }(n);
            _free(n);
            FS.analyzePath("/" + t.name).exists && Module.FS_unlink("/" + t.name)
        }
        Module.onCustomMessage = function(t) {
            var r = t.data.userData[0]
              , n = new FileReader;
            n.onloadend = function(t) {
                t.target.readyState == FileReader.DONE && e(t.target.result, r)
            }
            ;
            n.readAsArrayBuffer(r)
        }
        ;
        var t = {
            WORKER_LOADED: !0
        };
        postCustomMessage(t)
    },
    Fa: function(e) {
        var t = {};
        t.activities = Module.UTF8ToString(e).replace("\n", "<br>");
        postCustomMessage(t)
    },
    ea: function(e) {
        var t = {};
        t.androidManifest = Module.UTF8ToString(e);
        postCustomMessage(t)
    },
    pa: function(e) {
        var t = {};
        t.appLabel = Module.UTF8ToString(e, 5024);
        postCustomMessage(t)
    },
    X: function(e, t) {
        var arrayBufferToBase64 = function(buffer) {
            var uint8Array = new Uint8Array(buffer);
            var data = uint8Array.reduce(
              (acc, i) => (acc += String.fromCharCode.apply(null, [i])),
              ''
            );
            return data;
        }
        var r = new Uint8Array(Module.HEAPU8.buffer,e,t)
        var n = btoa(arrayBufferToBase64(r))
          , o = {};
        o.icon = "data:image/png;base64," + n;
        postCustomMessage(o)
    },
    Ha: function(e) {
        var t = {};
        t.minSdk = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    ya: function(e) {
        var t = {};
        t.nativeLibs = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    wa: function(e) {
        var t = {};
        t.packageName = Module.UTF8ToString(e, 5024);
        postCustomMessage(t)
    },
    Ba: function(e) {
        var t = {};
        t.permissions = Module.UTF8ToString(e, 12e4);
        postCustomMessage(t)
    },
    Ca: function(e) {
        var t = {};
        t.providers = Module.UTF8ToString(e).replace("\n", "<br>");
        postCustomMessage(t)
    },
    Da: function(e) {
        var t = {};
        t.receivers = Module.UTF8ToString(e).replace("\n", "<br>");
        postCustomMessage(t)
    },
    Ea: function(e) {
        var t = {};
        t.services = Module.UTF8ToString(e).replace("\n", "<br>");
        postCustomMessage(t)
    },
    za: function(e) {
        var t = {};
        t.supportedAbis = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    Ga: function(e) {
        var t = {};
        t.targetSdk = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    Aa: function(e) {
        var t = {};
        t.usedTech = Module.UTF8ToString(e, 10048);
        postCustomMessage(t)
    },
    M: function(e) {
        var t = {};
        t.versionCode = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    Ia: function(e) {
        var t = {};
        t.versionName = Module.UTF8ToString(e, 1024);
        postCustomMessage(t)
    },
    sa: _strftime,
    da: (e,t,r,n,o)=>_strftime(e, t, r, n)
}, wasmExports = function() {
    var e, t, r, n = {
        a: wasmImports
    };
    function o(e, t) {
        var r, n = e.exports;
        wasmMemory = (wasmExports = n).Ka;
        updateMemoryViews();
        wasmTable = wasmExports.Oa;
        r = wasmExports.La,
        __ATINIT__.unshift(r);
        removeRunDependency();
        return n
    }
    addRunDependency();
    if (Module.instantiateWasm)
        try {
            return Module.instantiateWasm(n, o)
        } catch (e) {
            err(`Module.instantiateWasm callback failed with error: ${e}`);
            return !1
        }
    e = wasmBinaryFile,
    t = n,
    r = function(e) {
        o(e.instance)
    }
    ,
    wasmBinary || "function" != typeof WebAssembly.instantiateStreaming || isDataURI(e) || "function" != typeof fetch ? instantiateArrayBuffer(e, t, r) : fetch(e, {
        credentials: "same-origin"
    }).then(n=>WebAssembly.instantiateStreaming(n, t).then(r, function(n) {
        err(`wasm streaming compile failed: ${n}`);
        err("falling back to ArrayBuffer instantiation");
        return instantiateArrayBuffer(e, t, r)
    }));
    return {}
}(), _main = Module._main = (e,t)=>(_main = Module._main = wasmExports.Ma)(e, t), _malloc = (Module._sixo_parse_file = e=>(Module._sixo_parse_file = wasmExports.Na)(e),
Module._malloc = e=>(_malloc = Module._malloc = wasmExports.Pa)(e)), _free = Module._free = e=>(_free = Module._free = wasmExports.Qa)(e), _emscripten_builtin_memalign = (e,t)=>(_emscripten_builtin_memalign = wasmExports.Ra)(e, t), _setThrew = (e,t)=>(_setThrew = wasmExports.Sa)(e, t), setTempRet0 = e=>(setTempRet0 = wasmExports.Ta)(e), stackSave = ()=>(stackSave = wasmExports.Ua)(), stackRestore = e=>(stackRestore = wasmExports.Va)(e), stackAlloc = e=>(stackAlloc = wasmExports.Wa)(e), ___cxa_decrement_exception_refcount = e=>(___cxa_decrement_exception_refcount = wasmExports.Xa)(e), ___cxa_increment_exception_refcount = e=>(___cxa_increment_exception_refcount = wasmExports.Ya)(e), ___cxa_can_catch = (e,t,r)=>(___cxa_can_catch = wasmExports.Za)(e, t, r), ___cxa_is_pointer_type = e=>(___cxa_is_pointer_type = wasmExports._a)(e), dynCall_viiji = Module.dynCall_viiji = (e,t,r,n,o,i)=>(dynCall_viiji = Module.dynCall_viiji = wasmExports.$a)(e, t, r, n, o, i), dynCall_iij = Module.dynCall_iij = (e,t,r,n)=>(dynCall_iij = Module.dynCall_iij = wasmExports.ab)(e, t, r, n), dynCall_iiiij = Module.dynCall_iiiij = (e,t,r,n,o,i)=>(dynCall_iiiij = Module.dynCall_iiiij = wasmExports.bb)(e, t, r, n, o, i), dynCall_iiiji = Module.dynCall_iiiji = (e,t,r,n,o,i)=>(dynCall_iiiji = Module.dynCall_iiiji = wasmExports.cb)(e, t, r, n, o, i), dynCall_jii = Module.dynCall_jii = (e,t,r)=>(dynCall_jii = Module.dynCall_jii = wasmExports.db)(e, t, r), dynCall_vij = Module.dynCall_vij = (e,t,r,n)=>(dynCall_vij = Module.dynCall_vij = wasmExports.eb)(e, t, r, n), dynCall_viji = Module.dynCall_viji = (e,t,r,n,o)=>(dynCall_viji = Module.dynCall_viji = wasmExports.fb)(e, t, r, n, o), dynCall_iiij = Module.dynCall_iiij = (e,t,r,n,o)=>(dynCall_iiij = Module.dynCall_iiij = wasmExports.gb)(e, t, r, n, o), dynCall_iiji = Module.dynCall_iiji = (e,t,r,n,o)=>(dynCall_iiji = Module.dynCall_iiji = wasmExports.hb)(e, t, r, n, o), dynCall_iiiijii = Module.dynCall_iiiijii = (e,t,r,n,o,i,a,s)=>(dynCall_iiiijii = Module.dynCall_iiiijii = wasmExports.ib)(e, t, r, n, o, i, a, s), dynCall_jiii = Module.dynCall_jiii = (e,t,r,n)=>(dynCall_jiii = Module.dynCall_jiii = wasmExports.jb)(e, t, r, n), dynCall_viiij = Module.dynCall_viiij = (e,t,r,n,o,i)=>(dynCall_viiij = Module.dynCall_viiij = wasmExports.kb)(e, t, r, n, o, i), dynCall_jiiii = Module.dynCall_jiiii = (e,t,r,n,o)=>(dynCall_jiiii = Module.dynCall_jiiii = wasmExports.lb)(e, t, r, n, o);
Module.__ZN4sixo2crE = 209920;
if (ENVIRONMENT_IS_WORKER) {
    function WebGLBuffer(e) {
        this.what = "buffer";
        this.id = e
    }
    function WebGLProgram(e) {
        this.what = "program";
        this.id = e;
        this.shaders = [];
        this.attributes = {};
        this.attributeVec = [];
        this.nextAttributes = {};
        this.nextAttributeVec = []
    }
    function WebGLFramebuffer(e) {
        this.what = "frameBuffer";
        this.id = e
    }
    function WebGLRenderbuffer(e) {
        this.what = "renderBuffer";
        this.id = e
    }
    function WebGLTexture(e) {
        this.what = "texture";
        this.id = e;
        this.binding = 0
    }
    function WebGLWorker() {
        this.DEPTH_BUFFER_BIT = 256;
        this.STENCIL_BUFFER_BIT = 1024;
        this.COLOR_BUFFER_BIT = 16384;
        this.POINTS = 0;
        this.LINES = 1;
        this.LINE_LOOP = 2;
        this.LINE_STRIP = 3;
        this.TRIANGLES = 4;
        this.TRIANGLE_STRIP = 5;
        this.TRIANGLE_FAN = 6;
        this.ZERO = 0;
        this.ONE = 1;
        this.SRC_COLOR = 768;
        this.ONE_MINUS_SRC_COLOR = 769;
        this.SRC_ALPHA = 770;
        this.ONE_MINUS_SRC_ALPHA = 771;
        this.DST_ALPHA = 772;
        this.ONE_MINUS_DST_ALPHA = 773;
        this.DST_COLOR = 774;
        this.ONE_MINUS_DST_COLOR = 775;
        this.SRC_ALPHA_SATURATE = 776;
        this.FUNC_ADD = 32774;
        this.BLEND_EQUATION = 32777;
        this.BLEND_EQUATION_RGB = 32777;
        this.BLEND_EQUATION_ALPHA = 34877;
        this.FUNC_SUBTRACT = 32778;
        this.FUNC_REVERSE_SUBTRACT = 32779;
        this.BLEND_DST_RGB = 32968;
        this.BLEND_SRC_RGB = 32969;
        this.BLEND_DST_ALPHA = 32970;
        this.BLEND_SRC_ALPHA = 32971;
        this.CONSTANT_COLOR = 32769;
        this.ONE_MINUS_CONSTANT_COLOR = 32770;
        this.CONSTANT_ALPHA = 32771;
        this.ONE_MINUS_CONSTANT_ALPHA = 32772;
        this.BLEND_COLOR = 32773;
        this.ARRAY_BUFFER = 34962;
        this.ELEMENT_ARRAY_BUFFER = 34963;
        this.ARRAY_BUFFER_BINDING = 34964;
        this.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
        this.STREAM_DRAW = 35040;
        this.STATIC_DRAW = 35044;
        this.DYNAMIC_DRAW = 35048;
        this.BUFFER_SIZE = 34660;
        this.BUFFER_USAGE = 34661;
        this.CURRENT_VERTEX_ATTRIB = 34342;
        this.FRONT = 1028;
        this.BACK = 1029;
        this.FRONT_AND_BACK = 1032;
        this.CULL_FACE = 2884;
        this.BLEND = 3042;
        this.DITHER = 3024;
        this.STENCIL_TEST = 2960;
        this.DEPTH_TEST = 2929;
        this.SCISSOR_TEST = 3089;
        this.POLYGON_OFFSET_FILL = 32823;
        this.SAMPLE_ALPHA_TO_COVERAGE = 32926;
        this.SAMPLE_COVERAGE = 32928;
        this.NO_ERROR = 0;
        this.INVALID_ENUM = 1280;
        this.INVALID_VALUE = 1281;
        this.INVALID_OPERATION = 1282;
        this.OUT_OF_MEMORY = 1285;
        this.CW = 2304;
        this.CCW = 2305;
        this.LINE_WIDTH = 2849;
        this.ALIASED_POINT_SIZE_RANGE = 33901;
        this.ALIASED_LINE_WIDTH_RANGE = 33902;
        this.CULL_FACE_MODE = 2885;
        this.FRONT_FACE = 2886;
        this.DEPTH_RANGE = 2928;
        this.DEPTH_WRITEMASK = 2930;
        this.DEPTH_CLEAR_VALUE = 2931;
        this.DEPTH_FUNC = 2932;
        this.STENCIL_CLEAR_VALUE = 2961;
        this.STENCIL_FUNC = 2962;
        this.STENCIL_FAIL = 2964;
        this.STENCIL_PASS_DEPTH_FAIL = 2965;
        this.STENCIL_PASS_DEPTH_PASS = 2966;
        this.STENCIL_REF = 2967;
        this.STENCIL_VALUE_MASK = 2963;
        this.STENCIL_WRITEMASK = 2968;
        this.STENCIL_BACK_FUNC = 34816;
        this.STENCIL_BACK_FAIL = 34817;
        this.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
        this.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
        this.STENCIL_BACK_REF = 36003;
        this.STENCIL_BACK_VALUE_MASK = 36004;
        this.STENCIL_BACK_WRITEMASK = 36005;
        this.VIEWPORT = 2978;
        this.SCISSOR_BOX = 3088;
        this.COLOR_CLEAR_VALUE = 3106;
        this.COLOR_WRITEMASK = 3107;
        this.UNPACK_ALIGNMENT = 3317;
        this.PACK_ALIGNMENT = 3333;
        this.MAX_TEXTURE_SIZE = 3379;
        this.MAX_VIEWPORT_DIMS = 3386;
        this.SUBPIXEL_BITS = 3408;
        this.RED_BITS = 3410;
        this.GREEN_BITS = 3411;
        this.BLUE_BITS = 3412;
        this.ALPHA_BITS = 3413;
        this.DEPTH_BITS = 3414;
        this.STENCIL_BITS = 3415;
        this.POLYGON_OFFSET_UNITS = 10752;
        this.POLYGON_OFFSET_FACTOR = 32824;
        this.TEXTURE_BINDING_2D = 32873;
        this.SAMPLE_BUFFERS = 32936;
        this.SAMPLES = 32937;
        this.SAMPLE_COVERAGE_VALUE = 32938;
        this.SAMPLE_COVERAGE_INVERT = 32939;
        this.COMPRESSED_TEXTURE_FORMATS = 34467;
        this.DONT_CARE = 4352;
        this.FASTEST = 4353;
        this.NICEST = 4354;
        this.GENERATE_MIPMAP_HINT = 33170;
        this.BYTE = 5120;
        this.UNSIGNED_BYTE = 5121;
        this.SHORT = 5122;
        this.UNSIGNED_SHORT = 5123;
        this.INT = 5124;
        this.UNSIGNED_INT = 5125;
        this.FLOAT = 5126;
        this.DEPTH_COMPONENT = 6402;
        this.ALPHA = 6406;
        this.RGB = 6407;
        this.RGBA = 6408;
        this.LUMINANCE = 6409;
        this.LUMINANCE_ALPHA = 6410;
        this.UNSIGNED_SHORT_4_4_4_4 = 32819;
        this.UNSIGNED_SHORT_5_5_5_1 = 32820;
        this.UNSIGNED_SHORT_5_6_5 = 33635;
        this.FRAGMENT_SHADER = 35632;
        this.VERTEX_SHADER = 35633;
        this.MAX_VERTEX_ATTRIBS = 34921;
        this.MAX_VERTEX_UNIFORM_VECTORS = 36347;
        this.MAX_VARYING_VECTORS = 36348;
        this.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
        this.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
        this.MAX_TEXTURE_IMAGE_UNITS = 34930;
        this.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
        this.SHADER_TYPE = 35663;
        this.DELETE_STATUS = 35712;
        this.LINK_STATUS = 35714;
        this.VALIDATE_STATUS = 35715;
        this.ATTACHED_SHADERS = 35717;
        this.ACTIVE_UNIFORMS = 35718;
        this.ACTIVE_ATTRIBUTES = 35721;
        this.SHADING_LANGUAGE_VERSION = 35724;
        this.CURRENT_PROGRAM = 35725;
        this.NEVER = 512;
        this.LESS = 513;
        this.EQUAL = 514;
        this.LEQUAL = 515;
        this.GREATER = 516;
        this.NOTEQUAL = 517;
        this.GEQUAL = 518;
        this.ALWAYS = 519;
        this.KEEP = 7680;
        this.REPLACE = 7681;
        this.INCR = 7682;
        this.DECR = 7683;
        this.INVERT = 5386;
        this.INCR_WRAP = 34055;
        this.DECR_WRAP = 34056;
        this.VENDOR = 7936;
        this.RENDERER = 7937;
        this.VERSION = 7938;
        this.NEAREST = 9728;
        this.LINEAR = 9729;
        this.NEAREST_MIPMAP_NEAREST = 9984;
        this.LINEAR_MIPMAP_NEAREST = 9985;
        this.NEAREST_MIPMAP_LINEAR = 9986;
        this.LINEAR_MIPMAP_LINEAR = 9987;
        this.TEXTURE_MAG_FILTER = 10240;
        this.TEXTURE_MIN_FILTER = 10241;
        this.TEXTURE_WRAP_S = 10242;
        this.TEXTURE_WRAP_T = 10243;
        this.TEXTURE_2D = 3553;
        this.TEXTURE = 5890;
        this.TEXTURE_CUBE_MAP = 34067;
        this.TEXTURE_BINDING_CUBE_MAP = 34068;
        this.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
        this.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
        this.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
        this.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
        this.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
        this.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
        this.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
        this.TEXTURE0 = 33984;
        this.TEXTURE1 = 33985;
        this.TEXTURE2 = 33986;
        this.TEXTURE3 = 33987;
        this.TEXTURE4 = 33988;
        this.TEXTURE5 = 33989;
        this.TEXTURE6 = 33990;
        this.TEXTURE7 = 33991;
        this.TEXTURE8 = 33992;
        this.TEXTURE9 = 33993;
        this.TEXTURE10 = 33994;
        this.TEXTURE11 = 33995;
        this.TEXTURE12 = 33996;
        this.TEXTURE13 = 33997;
        this.TEXTURE14 = 33998;
        this.TEXTURE15 = 33999;
        this.TEXTURE16 = 34e3;
        this.TEXTURE17 = 34001;
        this.TEXTURE18 = 34002;
        this.TEXTURE19 = 34003;
        this.TEXTURE20 = 34004;
        this.TEXTURE21 = 34005;
        this.TEXTURE22 = 34006;
        this.TEXTURE23 = 34007;
        this.TEXTURE24 = 34008;
        this.TEXTURE25 = 34009;
        this.TEXTURE26 = 34010;
        this.TEXTURE27 = 34011;
        this.TEXTURE28 = 34012;
        this.TEXTURE29 = 34013;
        this.TEXTURE30 = 34014;
        this.TEXTURE31 = 34015;
        this.ACTIVE_TEXTURE = 34016;
        this.REPEAT = 10497;
        this.CLAMP_TO_EDGE = 33071;
        this.MIRRORED_REPEAT = 33648;
        this.FLOAT_VEC2 = 35664;
        this.FLOAT_VEC3 = 35665;
        this.FLOAT_VEC4 = 35666;
        this.INT_VEC2 = 35667;
        this.INT_VEC3 = 35668;
        this.INT_VEC4 = 35669;
        this.BOOL = 35670;
        this.BOOL_VEC2 = 35671;
        this.BOOL_VEC3 = 35672;
        this.BOOL_VEC4 = 35673;
        this.FLOAT_MAT2 = 35674;
        this.FLOAT_MAT3 = 35675;
        this.FLOAT_MAT4 = 35676;
        this.SAMPLER_2D = 35678;
        this.SAMPLER_3D = 35679;
        this.SAMPLER_CUBE = 35680;
        this.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
        this.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
        this.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
        this.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
        this.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
        this.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
        this.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
        this.IMPLEMENTATION_COLOR_READ_TYPE = 35738;
        this.IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
        this.COMPILE_STATUS = 35713;
        this.LOW_FLOAT = 36336;
        this.MEDIUM_FLOAT = 36337;
        this.HIGH_FLOAT = 36338;
        this.LOW_INT = 36339;
        this.MEDIUM_INT = 36340;
        this.HIGH_INT = 36341;
        this.FRAMEBUFFER = 36160;
        this.RENDERBUFFER = 36161;
        this.RGBA4 = 32854;
        this.RGB5_A1 = 32855;
        this.RGB565 = 36194;
        this.DEPTH_COMPONENT16 = 33189;
        this.STENCIL_INDEX = 6401;
        this.STENCIL_INDEX8 = 36168;
        this.DEPTH_STENCIL = 34041;
        this.RENDERBUFFER_WIDTH = 36162;
        this.RENDERBUFFER_HEIGHT = 36163;
        this.RENDERBUFFER_INTERNAL_FORMAT = 36164;
        this.RENDERBUFFER_RED_SIZE = 36176;
        this.RENDERBUFFER_GREEN_SIZE = 36177;
        this.RENDERBUFFER_BLUE_SIZE = 36178;
        this.RENDERBUFFER_ALPHA_SIZE = 36179;
        this.RENDERBUFFER_DEPTH_SIZE = 36180;
        this.RENDERBUFFER_STENCIL_SIZE = 36181;
        this.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
        this.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
        this.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
        this.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
        this.COLOR_ATTACHMENT0 = 36064;
        this.DEPTH_ATTACHMENT = 36096;
        this.STENCIL_ATTACHMENT = 36128;
        this.DEPTH_STENCIL_ATTACHMENT = 33306;
        this.NONE = 0;
        this.FRAMEBUFFER_COMPLETE = 36053;
        this.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
        this.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
        this.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
        this.FRAMEBUFFER_UNSUPPORTED = 36061;
        this.ACTIVE_TEXTURE = 34016;
        this.FRAMEBUFFER_BINDING = 36006;
        this.RENDERBUFFER_BINDING = 36007;
        this.MAX_RENDERBUFFER_SIZE = 34024;
        this.INVALID_FRAMEBUFFER_OPERATION = 1286;
        this.UNPACK_FLIP_Y_WEBGL = 37440;
        this.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
        this.CONTEXT_LOST_WEBGL = 37442;
        this.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
        this.BROWSER_DEFAULT_WEBGL = 37444;
        var e = []
          , t = 1
          , r = {
            texture2D: null,
            arrayBuffer: null,
            elementArrayBuffer: null,
            program: null,
            framebuffer: null,
            activeTexture: this.TEXTURE0,
            generateMipmapHint: this.DONT_CARE,
            blendSrcRGB: this.ONE,
            blendSrcAlpha: this.ONE,
            blendDstRGB: this.ZERO,
            blendDstAlpha: this.ZERO,
            blendEquationRGB: this.FUNC_ADD,
            blendEquationAlpha: this.FUNC_ADD,
            enabledState: {}
        }
          , n = [this.BLEND, this.CULL_FACE, this.DEPTH_TEST, this.DITHER, this.POLYGON_OFFSET_FILL, this.SAMPLE_ALPHA_TO_COVERAGE, this.SAMPLE_COVERAGE, this.SCISSOR_TEST, this.STENCIL_TEST];
        for (var o in n)
            r.enabledState[n[o]] = !1;
        var i = this;
        this.onmessage = function(e) {
            switch (e.op) {
            case "setPrefetched":
                WebGLWorker.prototype.prefetchedParameters = e.parameters;
                WebGLWorker.prototype.prefetchedExtensions = e.extensions;
                WebGLWorker.prototype.prefetchedPrecisions = e.precisions;
                removeRunDependency();
                break;
            default:
                throw "weird gl onmessage " + JSON.stringify(e)
            }
        }
        ;
        function a(e) {
            for (var t in i)
                if (i[t] === e)
                    return t;
            return null
        }
        this.getParameter = function(e) {
            assert(e);
            if (e in this.prefetchedParameters)
                return this.prefetchedParameters[e];
            switch (e) {
            case this.TEXTURE_BINDING_2D:
                return r.texture2D;
            case this.ARRAY_BUFFER_BINDING:
                return r.arrayBuffer;
            case this.ELEMENT_ARRAY_BUFFER_BINDING:
                return r.elementArrayBuffer;
            case this.CURRENT_PROGRAM:
                return r.program;
            case this.FRAMEBUFFER_BINDING:
                return r.framebuffer;
            case this.ACTIVE_TEXTURE:
                return r.activeTexture;
            case this.GENERATE_MIPMAP_HINT:
                return r.generateMipmapHint;
            case this.BLEND_SRC_RGB:
                return r.blendSrcRGB;
            case this.BLEND_SRC_ALPHA:
                return r.blendSrcAlpha;
            case this.BLEND_DST_RGB:
                return r.blendDstRGB;
            case this.BLEND_DST_ALPHA:
                return r.blendDstAlpha;
            case this.BLEND_EQUATION_RGB:
                return r.blendEquationRGB;
            case this.BLEND_EQUATION_ALPHA:
                return r.blendEquationAlpha;
            default:
                if (void 0 !== r.enabledState[e])
                    return r.enabledState[e];
                throw "TODO: get parameter " + e + " : " + a(e)
            }
        }
        ;
        this.getExtension = function(t) {
            if (this.prefetchedExtensions.indexOf(t) < 0)
                return null;
            e.push(1, t);
            switch (t) {
            case "EXT_texture_filter_anisotropic":
                return {
                    TEXTURE_MAX_ANISOTROPY_EXT: 34046,
                    MAX_TEXTURE_MAX_ANISOTROPY_EXT: 34047
                };
            case "WEBGL_draw_buffers":
                return {
                    COLOR_ATTACHMENT0_WEBGL: 36064,
                    COLOR_ATTACHMENT1_WEBGL: 36065,
                    COLOR_ATTACHMENT2_WEBGL: 36066,
                    COLOR_ATTACHMENT3_WEBGL: 36067,
                    COLOR_ATTACHMENT4_WEBGL: 36068,
                    COLOR_ATTACHMENT5_WEBGL: 36069,
                    COLOR_ATTACHMENT6_WEBGL: 36070,
                    COLOR_ATTACHMENT7_WEBGL: 36071,
                    COLOR_ATTACHMENT8_WEBGL: 36072,
                    COLOR_ATTACHMENT9_WEBGL: 36073,
                    COLOR_ATTACHMENT10_WEBGL: 36074,
                    COLOR_ATTACHMENT11_WEBGL: 36075,
                    COLOR_ATTACHMENT12_WEBGL: 36076,
                    COLOR_ATTACHMENT13_WEBGL: 36077,
                    COLOR_ATTACHMENT14_WEBGL: 36078,
                    COLOR_ATTACHMENT15_WEBGL: 36079,
                    DRAW_BUFFER0_WEBGL: 34853,
                    DRAW_BUFFER1_WEBGL: 34854,
                    DRAW_BUFFER2_WEBGL: 34855,
                    DRAW_BUFFER3_WEBGL: 34856,
                    DRAW_BUFFER4_WEBGL: 34857,
                    DRAW_BUFFER5_WEBGL: 34858,
                    DRAW_BUFFER6_WEBGL: 34859,
                    DRAW_BUFFER7_WEBGL: 34860,
                    DRAW_BUFFER8_WEBGL: 34861,
                    DRAW_BUFFER9_WEBGL: 34862,
                    DRAW_BUFFER10_WEBGL: 34863,
                    DRAW_BUFFER11_WEBGL: 34864,
                    DRAW_BUFFER12_WEBGL: 34865,
                    DRAW_BUFFER13_WEBGL: 34866,
                    DRAW_BUFFER14_WEBGL: 34867,
                    DRAW_BUFFER15_WEBGL: 34868,
                    MAX_COLOR_ATTACHMENTS_WEBGL: 36063,
                    MAX_DRAW_BUFFERS_WEBGL: 34852,
                    drawBuffersWEBGL: function(e) {
                        i.drawBuffersWEBGL(e)
                    }
                };
            case "OES_standard_derivatives":
                return {
                    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723
                }
            }
            return !0
        }
        ;
        this.getSupportedExtensions = function() {
            return this.prefetchedExtensions
        }
        ;
        this.getShaderPrecisionFormat = function(e, t) {
            return this.prefetchedPrecisions[e][t]
        }
        ;
        this.enable = function(t) {
            e.push(2, t);
            r.enabledState[t] = !0
        }
        ;
        this.isEnabled = function(e) {
            return r.enabledState[e]
        }
        ;
        this.disable = function(t) {
            e.push(3, t);
            r.enabledState[t] = !1
        }
        ;
        this.clear = function(t) {
            e.push(4, t)
        }
        ;
        this.clearColor = function(t, r, n, o) {
            e.push(5, t, r, n, o)
        }
        ;
        this.createShader = function(r) {
            var n = t++;
            e.push(6, r, n);
            return {
                id: n,
                what: "shader",
                type: r
            }
        }
        ;
        this.deleteShader = function(t) {
            t && e.push(7, t.id)
        }
        ;
        this.shaderSource = function(t, r) {
            t.source = r;
            e.push(8, t.id, r)
        }
        ;
        this.compileShader = function(t) {
            e.push(9, t.id)
        }
        ;
        this.getShaderInfoLog = function(e) {
            return ""
        }
        ;
        this.createProgram = function() {
            var r = t++;
            e.push(10, r);
            return new WebGLProgram(r)
        }
        ;
        this.deleteProgram = function(t) {
            t && e.push(11, t.id)
        }
        ;
        this.attachShader = function(t, r) {
            t.shaders.push(r);
            e.push(12, t.id, r.id)
        }
        ;
        this.bindAttribLocation = function(t, r, n) {
            t.nextAttributes[n] = {
                what: "attribute",
                name: n,
                size: -1,
                location: r,
                type: "?"
            };
            t.nextAttributeVec[r] = n;
            e.push(13, t.id, r, n)
        }
        ;
        this.getAttribLocation = function(e, t) {
            return t in e.attributes ? e.attributes[t].location : -1
        }
        ;
        this.linkProgram = function(t) {
            function r(e) {
                switch (e) {
                case "bool":
                    return i.BOOL;
                case "int":
                    return i.INT;
                case "uint":
                    return i.UNSIGNED_INT;
                case "float":
                    return i.FLOAT;
                case "vec2":
                    return i.FLOAT_VEC2;
                case "vec3":
                    return i.FLOAT_VEC3;
                case "vec4":
                    return i.FLOAT_VEC4;
                case "ivec2":
                    return i.INT_VEC2;
                case "ivec3":
                    return i.INT_VEC3;
                case "ivec4":
                    return i.INT_VEC4;
                case "bvec2":
                    return i.BOOL_VEC2;
                case "bvec3":
                    return i.BOOL_VEC3;
                case "bvec4":
                    return i.BOOL_VEC4;
                case "mat2":
                    return i.FLOAT_MAT2;
                case "mat3":
                    return i.FLOAT_MAT3;
                case "mat4":
                    return i.FLOAT_MAT4;
                case "sampler2D":
                    return i.SAMPLER_2D;
                case "sampler3D":
                    return i.SAMPLER_3D;
                case "samplerCube":
                    return i.SAMPLER_CUBE;
                default:
                    throw "not yet recognized type text: " + e
                }
            }
            function n(e, t, n, o) {
                var i = e.source
                  , a = (i = i.replace(/\n/g, "|\n")).match(new RegExp(t + "\\s+\\w+\\s+[\\w,\\s[\\]]+;","g"));
                a && a.forEach(function(e) {
                    var i = new RegExp(t + "\\s+(\\w+)\\s+([\\w,\\s[\\]]+);").exec(e);
                    assert(i);
                    i[2].split(",").map(function(e) {
                        return (e = e.trim()).search(/\s/) >= 0 ? "" : e
                    }).filter(function(e) {
                        return !!e
                    }).forEach(function(e) {
                        var a = 1
                          , s = e.indexOf("[")
                          , u = e;
                        if (s >= 0) {
                            var l = e.indexOf("]");
                            a = parseInt(e.substring(s + 1, l));
                            u = (e = e.substr(0, s)) + "[0]"
                        }
                        if (!n[e]) {
                            n[e] = {
                                what: t,
                                name: u,
                                size: a,
                                location: -1,
                                type: r(i[1])
                            };
                            o && o.push(e)
                        }
                    })
                })
            }
            t.uniforms = {};
            t.uniformVec = [];
            t.attributes = t.nextAttributes;
            t.attributeVec = t.nextAttributeVec;
            t.nextAttributes = {};
            t.nextAttributeVec = [];
            var o = {};
            t.shaders.forEach(function(e) {
                n(e, "uniform", t.uniforms, t.uniformVec);
                n(e, "attribute", o, null)
            });
            for (var a in o) {
                if (!(a in t.attributes)) {
                    var s = t.attributeVec.length;
                    t.attributes[a] = {
                        what: "attribute",
                        name: a,
                        size: -1,
                        location: s,
                        type: "?"
                    };
                    t.attributeVec[s] = a;
                    e.push(13, t.id, s, a)
                }
                t.attributes[a].size = o[a].size;
                t.attributes[a].type = o[a].type
            }
            e.push(14, t.id)
        }
        ;
        this.getProgramParameter = function(t, r) {
            switch (r) {
            case this.ACTIVE_UNIFORMS:
                return t.uniformVec.length;
            case this.ACTIVE_ATTRIBUTES:
                return t.attributeVec.length;
            case this.LINK_STATUS:
                e.push(15, t.id, r);
                return !0;
            default:
                throw "bad getProgramParameter " + a(r)
            }
        }
        ;
        this.getActiveAttrib = function(e, t) {
            var r = e.attributeVec[t];
            return r ? e.attributes[r] : null
        }
        ;
        this.getActiveUniform = function(e, t) {
            var r = e.uniformVec[t];
            return r ? e.uniforms[r] : null
        }
        ;
        this.getUniformLocation = function(r, n) {
            var o = n
              , i = -1
              , a = n.indexOf("[");
            if (a >= 0) {
                var s = n.indexOf("]");
                i = parseInt(n.substring(a + 1, s));
                n = n.substr(0, a)
            }
            if (!(n in r.uniforms))
                return null;
            var u = t++;
            e.push(16, r.id, o, u);
            return {
                what: "location",
                uniform: r.uniforms[n],
                id: u,
                index: i
            }
        }
        ;
        this.getProgramInfoLog = function(e) {
            return ""
        }
        ;
        this.useProgram = function(t) {
            e.push(17, t ? t.id : 0);
            r.program = t
        }
        ;
        this.uniform1i = function(t, r) {
            t && e.push(18, t.id, r)
        }
        ;
        this.uniform1f = function(t, r) {
            t && e.push(19, t.id, r)
        }
        ;
        this.uniform3fv = function(t, r) {
            t && e.push(20, t.id, new Float32Array(r))
        }
        ;
        this.uniform4f = function(t, r, n, o, i) {
            t && e.push(21, t.id, new Float32Array([r, n, o, i]))
        }
        ;
        this.uniform4fv = function(t, r) {
            t && e.push(21, t.id, new Float32Array(r))
        }
        ;
        this.uniformMatrix4fv = function(t, r, n) {
            t && e.push(22, t.id, r, new Float32Array(n))
        }
        ;
        this.vertexAttrib4fv = function(t, r) {
            e.push(23, t, new Float32Array(r))
        }
        ;
        this.createBuffer = function() {
            var r = t++;
            e.push(24, r);
            return new WebGLBuffer(r)
        }
        ;
        this.deleteBuffer = function(t) {
            t && e.push(25, t.id)
        }
        ;
        this.bindBuffer = function(t, n) {
            e.push(26, t, n ? n.id : 0);
            switch (t) {
            case this.ARRAY_BUFFER_BINDING:
                r.arrayBuffer = n;
                break;
            case this.ELEMENT_ARRAY_BUFFER_BINDING:
                r.elementArrayBuffer = n
            }
        }
        ;
        function s(e) {
            return e && "number" != typeof e ? e.slice ? e.slice(0) : new e.constructor(e) : e
        }
        this.bufferData = function(t, r, n) {
            e.push(27, t, s(r), n)
        }
        ;
        this.bufferSubData = function(t, r, n) {
            e.push(28, t, r, s(n))
        }
        ;
        this.viewport = function(t, r, n, o) {
            e.push(29, t, r, n, o)
        }
        ;
        this.vertexAttribPointer = function(t, r, n, o, i, a) {
            e.push(30, t, r, n, o, i, a)
        }
        ;
        this.enableVertexAttribArray = function(t) {
            e.push(31, t)
        }
        ;
        this.disableVertexAttribArray = function(t) {
            e.push(32, t)
        }
        ;
        this.drawArrays = function(t, r, n) {
            e.push(33, t, r, n)
        }
        ;
        this.drawElements = function(t, r, n, o) {
            e.push(34, t, r, n, o)
        }
        ;
        this.getError = function() {
            e.push(35);
            return this.NO_ERROR
        }
        ;
        this.createTexture = function() {
            var r = t++;
            e.push(36, r);
            return new WebGLTexture(r)
        }
        ;
        this.deleteTexture = function(t) {
            if (t) {
                e.push(37, t.id);
                t.id = 0
            }
        }
        ;
        this.isTexture = function(e) {
            return e && "texture" === e.what && e.id > 0 && e.binding
        }
        ;
        this.bindTexture = function(t, n) {
            switch (t) {
            case i.TEXTURE_2D:
                r.texture2D = n
            }
            n && (n.binding = t);
            e.push(38, t, n ? n.id : 0)
        }
        ;
        this.texParameteri = function(t, r, n) {
            e.push(39, t, r, n)
        }
        ;
        this.texImage2D = function(t, r, n, o, i, a, u, l, c) {
            if (void 0 === c) {
                u = o;
                l = i;
                assert((c = a)instanceof Image);
                assert(n === u && u === this.RGBA);
                assert(l === this.UNSIGNED_BYTE);
                var d = c.data;
                o = d.width;
                i = d.height;
                a = 0;
                c = new Uint8Array(d.data)
            }
            e.push(40, t, r, n, o, i, a, u, l, s(c))
        }
        ;
        this.compressedTexImage2D = function(t, r, n, o, i, a, u) {
            e.push(41, t, r, n, o, i, a, s(u))
        }
        ;
        this.activeTexture = function(t) {
            e.push(42, t);
            r.activeTexture = t
        }
        ;
        this.getShaderParameter = function(t, r) {
            switch (r) {
            case this.SHADER_TYPE:
                return t.type;
            case this.COMPILE_STATUS:
                e.push(43, t.id, r);
                return !0;
            default:
                throw "unsupported getShaderParameter " + r
            }
        }
        ;
        this.clearDepth = function(t) {
            e.push(44, t)
        }
        ;
        this.depthFunc = function(t) {
            e.push(45, t)
        }
        ;
        this.frontFace = function(t) {
            e.push(46, t)
        }
        ;
        this.cullFace = function(t) {
            e.push(47, t)
        }
        ;
        this.readPixels = function(e) {
            abort("readPixels is impossible, we are async GL")
        }
        ;
        this.pixelStorei = function(t, r) {
            e.push(48, t, r)
        }
        ;
        this.depthMask = function(t) {
            e.push(49, t)
        }
        ;
        this.depthRange = function(t, r) {
            e.push(50, t, r)
        }
        ;
        this.blendFunc = function(t, n) {
            e.push(51, t, n);
            r.blendSrcRGB = r.blendSrcAlpha = t;
            r.blendDstRGB = r.blendDstAlpha = n
        }
        ;
        this.scissor = function(t, r, n, o) {
            e.push(52, t, r, n, o)
        }
        ;
        this.colorMask = function(t, r, n, o) {
            e.push(53, t, r, n, o)
        }
        ;
        this.lineWidth = function(t) {
            e.push(54, t)
        }
        ;
        this.createFramebuffer = function() {
            var r = t++;
            e.push(55, r);
            return new WebGLFramebuffer(r)
        }
        ;
        this.deleteFramebuffer = function(t) {
            t && e.push(56, t.id)
        }
        ;
        this.bindFramebuffer = function(t, n) {
            e.push(57, t, n ? n.id : 0);
            r.framebuffer = n
        }
        ;
        this.framebufferTexture2D = function(t, r, n, o, i) {
            e.push(58, t, r, n, o ? o.id : 0, i)
        }
        ;
        this.checkFramebufferStatus = function(e) {
            return this.FRAMEBUFFER_COMPLETE
        }
        ;
        this.createRenderbuffer = function() {
            var r = t++;
            e.push(59, r);
            return new WebGLRenderbuffer(r)
        }
        ;
        this.deleteRenderbuffer = function(t) {
            t && e.push(60, t.id)
        }
        ;
        this.bindRenderbuffer = function(t, r) {
            e.push(61, t, r ? r.id : 0)
        }
        ;
        this.renderbufferStorage = function(t, r, n, o) {
            e.push(62, t, r, n, o)
        }
        ;
        this.framebufferRenderbuffer = function(t, r, n, o) {
            e.push(63, t, r, n, o ? o.id : 0)
        }
        ;
        this.debugPrint = function(t) {
            e.push(64, t)
        }
        ;
        this.hint = function(t, n) {
            e.push(65, t, n);
            t == this.GENERATE_MIPMAP_HINT && (r.generateMipmapHint = n)
        }
        ;
        this.blendEquation = function(t) {
            e.push(66, t);
            r.blendEquationRGB = r.blendEquationAlpha = t
        }
        ;
        this.generateMipmap = function(t) {
            e.push(67, t)
        }
        ;
        this.uniformMatrix3fv = function(t, r, n) {
            t && e.push(68, t.id, r, new Float32Array(n))
        }
        ;
        this.stencilMask = function(t) {
            e.push(69, t)
        }
        ;
        this.clearStencil = function(t) {
            e.push(70, t)
        }
        ;
        this.texSubImage2D = function(t, r, n, o, i, a, u, l, c) {
            if (void 0 === c) {
                var d = u;
                u = i;
                l = a;
                assert((c = d)instanceof Image);
                assert(u === this.RGBA);
                assert(l === this.UNSIGNED_BYTE);
                var h = c.data;
                i = h.width;
                a = h.height;
                c = new Uint8Array(h.data)
            }
            e.push(71, t, r, n, o, i, a, u, l, s(c))
        }
        ;
        this.uniform3f = function(t, r, n, o) {
            t && e.push(72, t.id, r, n, o)
        }
        ;
        this.blendFuncSeparate = function(t, n, o, i) {
            e.push(73, t, n, o, i);
            r.blendSrcRGB = t;
            r.blendSrcAlpha = o;
            r.blendDstRGB = n;
            r.blendDstAlpha = i
        }
        ;
        this.uniform2fv = function(t, r) {
            t && e.push(74, t.id, new Float32Array(r))
        }
        ;
        this.texParameterf = function(t, r, n) {
            e.push(75, t, r, n)
        }
        ;
        this.isContextLost = function() {
            e.push(76);
            return !1
        }
        ;
        this.isProgram = function(e) {
            return e && "program" === e.what
        }
        ;
        this.blendEquationSeparate = function(t, n) {
            e.push(77, t, n);
            r.blendEquationRGB = t;
            r.blendEquationAlpha = n
        }
        ;
        this.stencilFuncSeparate = function(t, r, n, o) {
            e.push(78, t, r, n, o)
        }
        ;
        this.stencilOpSeparate = function(t, r, n, o) {
            e.push(79, t, r, n, o)
        }
        ;
        this.drawBuffersWEBGL = function(t) {
            e.push(80, t)
        }
        ;
        this.uniform1iv = function(t, r) {
            t && e.push(81, t.id, new Int32Array(r))
        }
        ;
        this.uniform1fv = function(t, r) {
            t && e.push(82, t.id, new Float32Array(r))
        }
        ;
        new FPSTracker("server (theoretical)"),
        new FPSTracker("server (client-throttled)");
        var u = !1;
        function l() {
            if (e.length > 0) {
                postMessage({
                    target: "gl",
                    op: "render",
                    commandBuffer: e
                });
                e = []
            }
            u = !0
        }
        assert(!Browser.doSwapBuffers);
        Browser.doSwapBuffers = l;
        var c = window.requestAnimationFrame;
        window.requestAnimationFrame = function(e) {
            c(function() {
                if (!1 !== function() {
                    if (Math.abs(frameId - clientFrameId) >= 4)
                        return !1
                }()) {
                    u = !1;
                    e();
                    u || l()
                } else
                    window.requestAnimationFrame(e)
            })
        }
    }
    WebGLWorker.prototype.prefetchedParameters = {};
    WebGLWorker.prototype.prefetchedExtensions = {};
    WebGLWorker.prototype.prefetchedPrecisions = {};
    function FPSTracker(e) {
        var t = 0
          , r = 0
          , n = 0;
        this.tick = ()=>{
            var o = Date.now();
            if (t > 0) {
                r = .99 * r + .01 * (o - t);
                if (60 == n++) {
                    n = 0;
                    dump(e + " fps: " + (1e3 / r).toFixed(2) + "\n")
                }
            }
            t = o
        }
    }
    function Element() {
        throw "TODO: Element"
    }
    function PropertyBag() {
        this.addProperty = ()=>{}
        ;
        this.removeProperty = ()=>{}
        ;
        this.setProperty = ()=>{}
    }
    var IndexedObjects = {
        nextId: 1,
        cache: {},
        add(e) {
            e.id = this.nextId++;
            this.cache[e.id] = e
        }
    };
    function EventListener() {
        this.listeners = {};
        this.addEventListener = function(e, t) {
            this.listeners[e] || (this.listeners[e] = []);
            this.listeners[e].push(t)
        }
        ;
        this.removeEventListener = function(e, t) {
            var r = this.listeners[e];
            if (r) {
                var n = r.indexOf(t);
                n < 0 || r.splice(n, 1)
            }
        }
        ;
        this.fireEvent = function(e) {
            e.preventDefault = ()=>{}
            ;
            e.type in this.listeners && this.listeners[e.type].forEach(t=>t(e))
        }
    }
    function Image() {
        IndexedObjects.add(this);
        EventListener.call(this);
        var e = "";
        Object.defineProperty(this, "src", {
            set: t=>{
                e = t;
                assert(this.id);
                postMessage({
                    target: "Image",
                    method: "src",
                    src: e,
                    id: this.id
                })
            }
            ,
            get: ()=>e
        })
    }
    Image.prototype.onload = ()=>{}
    ;
    Image.prototype.onerror = ()=>{}
    ;
    var window = this
      , windowExtra = new EventListener;
    for (var x in windowExtra)
        window[x] = windowExtra[x];
    window.close = ()=>{
        postMessage({
            target: "window",
            method: "close"
        })
    }
    ;
    window.alert = e=>{
        err(`alert forever: ${e}`);
        for (; ; )
            ;
    }
    ;
    window.scrollX = window.scrollY = 0;
    window.WebGLRenderingContext = WebGLWorker;
    window.requestAnimationFrame = (nextRAF = 0,
    function(e) {
        var t = Date.now();
        if (0 === nextRAF)
            nextRAF = t + 1e3 / 60;
        else
            for (; t + 2 >= nextRAF; )
                nextRAF += 1e3 / 60;
        var r = Math.max(nextRAF - t, 0);
        setTimeout(e, r)
    }
    );
    var webGLWorker = new WebGLWorker
      , document = new EventListener;
    document.createElement = e=>{
        switch (e) {
        case "canvas":
            var t = new EventListener;
            t.ensureData = ()=>{
                if (!t.data || t.data.width !== t.width || t.data.height !== t.height) {
                    t.data = {
                        width: t.width,
                        height: t.height,
                        data: new Uint8Array(t.width * t.height * 4)
                    };
                    t === Module.canvas && postMessage({
                        target: "canvas",
                        op: "resize",
                        width: t.width,
                        height: t.height
                    })
                }
            }
            ;
            t.getContext = (e,r)=>{
                t === Module.canvas && postMessage({
                    target: "canvas",
                    op: "getContext",
                    type: e,
                    attributes: r
                });
                return "2d" === e ? {
                    getImageData: (e,r,n,o)=>{
                        assert(0 == e && 0 == r && n == t.width && o == t.height);
                        t.ensureData();
                        return {
                            width: t.data.width,
                            height: t.data.height,
                            data: new Uint8Array(t.data.data)
                        }
                    }
                    ,
                    putImageData: (e,r,n)=>{
                        t.ensureData();
                        assert(0 == r && 0 == n && e.width == t.width && e.height == t.height);
                        t.data.data.set(e.data);
                        t === Module.canvas && postMessage({
                            target: "canvas",
                            op: "render",
                            image: t.data
                        })
                    }
                    ,
                    drawImage: (e,r,n,o,i,a,s,u,l)=>{
                        assert(!(r || n || a || s));
                        assert(o === u && i === l);
                        assert(t.width === o || void 0 === o);
                        assert(t.height === i || void 0 === i);
                        assert(e.width === t.width && e.height === t.height);
                        t.ensureData();
                        t.data.data.set(e.data.data);
                        t === Module.canvas && postMessage({
                            target: "canvas",
                            op: "render",
                            image: t.data
                        })
                    }
                } : webGLWorker
            }
            ;
            t.boundingClientRect = {};
            t.getBoundingClientRect = ()=>({
                width: t.boundingClientRect.width,
                height: t.boundingClientRect.height,
                top: t.boundingClientRect.top,
                left: t.boundingClientRect.left,
                bottom: t.boundingClientRect.bottom,
                right: t.boundingClientRect.right
            });
            t.style = new PropertyBag;
            t.exitPointerLock = ()=>{}
            ;
            t.width_ = t.width_ || 0;
            t.height_ = t.height_ || 0;
            Object.defineProperty(t, "width", {
                set: e=>{
                    t.width_ = e;
                    t === Module.canvas && postMessage({
                        target: "canvas",
                        op: "resize",
                        width: t.width_,
                        height: t.height_
                    })
                }
                ,
                get: ()=>t.width_
            });
            Object.defineProperty(t, "height", {
                set: e=>{
                    t.height_ = e;
                    t === Module.canvas && postMessage({
                        target: "canvas",
                        op: "resize",
                        width: t.width_,
                        height: t.height_
                    })
                }
                ,
                get: ()=>t.height_
            });
            var r = {
                parentCanvas: t,
                removeProperty: ()=>{}
                ,
                setProperty: ()=>{}
            };
            Object.defineProperty(r, "cursor", {
                set: e=>{
                    if (!r.cursor_ || r.cursor_ !== e) {
                        r.cursor_ = e;
                        r.parentCanvas === Module.canvas && postMessage({
                            target: "canvas",
                            op: "setObjectProperty",
                            object: "style",
                            property: "cursor",
                            value: r.cursor_
                        })
                    }
                }
                ,
                get: ()=>r.cursor
            });
            t.style = r;
            return t;
        default:
            throw "document.createElement " + e
        }
    }
    ;
    document.getElementById = e=>{
        if ("canvas" === e || "application-canvas" === e)
            return Module.canvas;
        throw "document.getElementById failed on " + e
    }
    ;
    document.querySelector = e=>{
        if ("#canvas" === e || "#application-canvas" === e || "canvas" === e || "application-canvas" === e)
            return Module.canvas;
        throw "document.querySelector failed on " + e
    }
    ;
    document.documentElement = {};
    document.styleSheets = [{
        cssRules: [],
        insertRule(e, t) {
            this.cssRules.splice(t, 0, e)
        }
    }];
    document.URL = "http://worker.not.yet.ready.wait.for.window.onload?fake";
    function Audio() {
        warnOnce("faking Audio elements, no actual sound will play")
    }
    Audio.prototype = new EventListener;
    Object.defineProperty(Audio.prototype, "src", {
        set(e) {
            "d" !== e[0] && this.onerror()
        }
    });
    Audio.prototype.play = ()=>{}
    ;
    Audio.prototype.pause = ()=>{}
    ;
    Audio.prototype.cloneNode = ()=>new Audio;
    var screen = {
        width: 0,
        height: 0
    };
    Module.canvas = document.createElement("canvas");
    Module.setStatus = ()=>{}
    ;
    out = e=>{
        postMessage({
            target: "stdout",
            content: e
        })
    }
    ;
    err = e=>{
        postMessage({
            target: "stderr",
            content: e
        })
    }
    ;
    var frameId = 0
      , clientFrameId = 0
      , postMainLoop = Module.postMainLoop;
    Module.postMainLoop = ()=>{
        postMainLoop && postMainLoop();
        postMessage({
            target: "tick",
            id: frameId++
        });
        commandBuffer = []
    }
    ;
    addRunDependency();
    var messageBuffer = null
      , messageResenderTimeout = null
      , calledMain = !1;
    Module.postRun || (Module.postRun = []);
    "function" == typeof Module.postRun && (Module.postRun = [Module.postRun]);
    Module.postRun.push(()=>{
        calledMain = !0
    }
    );
    function messageResender() {
        if (calledMain) {
            assert(messageBuffer && messageBuffer.length > 0);
            messageResenderTimeout = null;
            messageBuffer.forEach(e=>onmessage(e));
            messageBuffer = null
        } else
            messageResenderTimeout = setTimeout(messageResender, 100)
    }
    onmessage = function(e) {
        if (calledMain || e.data.preMain) {
            if (calledMain && messageResenderTimeout) {
                clearTimeout(messageResenderTimeout);
                messageResender()
            }
            switch (e.data.target) {
            case "document":
                document.fireEvent(e.data.event);
                break;
            case "window":
                window.fireEvent(e.data.event);
                break;
            case "canvas":
                if (e.data.event)
                    Module.canvas.fireEvent(e.data.event);
                else {
                    if (!e.data.boundingClientRect)
                        throw "ey?";
                    Module.canvas.boundingClientRect = e.data.boundingClientRect
                }
                break;
            case "gl":
                webGLWorker.onmessage(e.data);
                break;
            case "tock":
                clientFrameId = e.data.id;
                break;
            case "Image":
                var t = IndexedObjects.cache[e.data.id];
                switch (e.data.method) {
                case "onload":
                    t.width = e.data.width;
                    t.height = e.data.height;
                    t.data = {
                        width: t.width,
                        height: t.height,
                        data: e.data.data
                    };
                    t.complete = !0;
                    t.onload();
                    break;
                case "onerror":
                    t.onerror({
                        srcElement: t
                    })
                }
                break;
            case "IDBStore":
                assert("response" === e.data.method);
                assert(IDBStore.pending);
                IDBStore.pending(e.data);
                break;
            case "worker-init":
                Module.canvas = document.createElement("canvas");
                screen.width = Module.canvas.width_ = e.data.width;
                screen.height = Module.canvas.height_ = e.data.height;
                Module.canvas.boundingClientRect = e.data.boundingClientRect;
                document.URL = e.data.URL;
                window.fireEvent({
                    type: "load"
                });
                removeRunDependency();
                break;
            case "custom":
                if (!Module.onCustomMessage)
                    throw "Custom message received but worker Module.onCustomMessage not implemented.";
                Module.onCustomMessage(e);
                break;
            case "setimmediate":
                Module.setImmediates && Module.setImmediates.shift()();
                break;
            default:
                throw "wha? " + e.data.target
            }
        } else {
            if (!messageBuffer) {
                messageBuffer = [];
                messageResenderTimeout = setTimeout(messageResender, 100)
            }
            messageBuffer.push(e)
        }
    }
    ;
    "undefined" != typeof specialHTMLTargets && (specialHTMLTargets = [0, document, window]);
    function postCustomMessage(e) {
        postMessage({
            target: "custom",
            userData: e
        })
    }
}
Module.FS_createDataFile = FS.createDataFile;
Module.FS_unlink = FS.unlink;
Module.UTF8ToString = UTF8ToString;
Module.intArrayFromString = intArrayFromString;
Module.allocate = allocate;
dependenciesFulfilled = function e() {
    calledRun || run();
    calledRun || (dependenciesFulfilled = e)
}
;
function run(e=arguments_) {
    if (!(runDependencies > 0)) {
        !function() {
            if (Module.preRun) {
                "function" == typeof Module.preRun && (Module.preRun = [Module.preRun]);
                for (; Module.preRun.length; )
                    e = Module.preRun.shift(),
                    __ATPRERUN__.unshift(e)
            }
            var e;
            callRuntimeCallbacks(__ATPRERUN__)
        }();
        if (!(runDependencies > 0))
            if (Module.setStatus) {
                Module.setStatus("Running...");
                setTimeout(function() {
                    setTimeout(function() {
                        Module.setStatus("")
                    }, 1);
                    t()
                }, 1)
            } else
                t()
    }
    function t() {
        if (!calledRun) {
            calledRun = !0;
            Module.calledRun = !0;
            if (!ABORT) {
                !function() {
                    !0;
                    Module.noFSInit || FS.init.initialized || FS.init();
                    FS.ignorePermissions = !1;
                    TTY.init();
                    callRuntimeCallbacks(__ATINIT__)
                }();
                callRuntimeCallbacks(__ATMAIN__);
                Module.onRuntimeInitialized && Module.onRuntimeInitialized();
                shouldRunNow && function(e=[]) {
                    var t = _main;
                    e.unshift(thisProgram);
                    var r = e.length
                      , n = stackAlloc(4 * (r + 1))
                      , o = n;
                    e.forEach(e=>{
                        HEAPU32[o >> 2] = stringToUTF8OnStack(e);
                        o += 4
                    }
                    );
                    HEAPU32[o >> 2] = 0;
                    try {
                        var i = t(r, n);
                        exitJS(i, !0)
                    } catch (e) {
                        return handleException(e)
                    }
                }(e);
                !function() {
                    if (Module.postRun) {
                        "function" == typeof Module.postRun && (Module.postRun = [Module.postRun]);
                        for (; Module.postRun.length; )
                            e = Module.postRun.shift(),
                            __ATPOSTRUN__.unshift(e)
                    }
                    var e;
                    callRuntimeCallbacks(__ATPOSTRUN__)
                }()
            }
        }
    }
}
if (Module.preInit) {
    "function" == typeof Module.preInit && (Module.preInit = [Module.preInit]);
    for (; Module.preInit.length > 0; )
        Module.preInit.pop()()
}
var shouldRunNow = !0;
Module.noInitialRun && (shouldRunNow = !1);
run();
